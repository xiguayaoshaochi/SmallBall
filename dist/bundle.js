!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!_[e]||!x[e])return;for(var n in x[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--g&&0===b&&I()}(e,n),t&&t(e,n)};var n,o=!0,r="f8568c37de70416a427b",a={},i=[],s=[];function c(e){var t=C[e];if(!t)return D;var o=function(o){return t.hot.active?(C[o]?-1===C[o].parents.indexOf(e)&&C[o].parents.push(e):(i=[e],n=o),-1===t.children.indexOf(o)&&t.children.push(o)):(console.warn("[HMR] unexpected require("+o+") from disposed module "+e),i=[]),D(o)},r=function(e){return{configurable:!0,enumerable:!0,get:function(){return D[e]},set:function(t){D[e]=t}}};for(var a in D)Object.prototype.hasOwnProperty.call(D,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(o,a,r(a));return o.e=function(e){return"ready"===u&&p("prepare"),b++,D.e(e).then(t,(function(e){throw t(),e}));function t(){b--,"prepare"===u&&(y[e]||O(e),0===b&&0===g&&I())}},o.t=function(e,t){return 1&t&&(e=o(e)),D.t(e,-2&t)},o}function d(t){var o={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==t,active:!0,accept:function(e,t){if(void 0===e)o._selfAccepted=!0;else if("function"==typeof e)o._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)o._acceptedDependencies[e[n]]=t||function(){};else o._acceptedDependencies[e]=t||function(){}},decline:function(e){if(void 0===e)o._selfDeclined=!0;else if("object"==typeof e)for(var t=0;t<e.length;t++)o._declinedDependencies[e[t]]=!0;else o._declinedDependencies[e]=!0},dispose:function(e){o._disposeHandlers.push(e)},addDisposeHandler:function(e){o._disposeHandlers.push(e)},removeDisposeHandler:function(e){var t=o._disposeHandlers.indexOf(e);t>=0&&o._disposeHandlers.splice(t,1)},invalidate:function(){switch(this._selfInvalidated=!0,u){case"idle":(h={})[t]=e[t],p("ready");break;case"ready":k(t);break;case"prepare":case"check":case"dispose":case"apply":(m=m||[]).push(t)}},check:$,apply:j,status:function(e){if(!e)return u;l.push(e)},addStatusHandler:function(e){l.push(e)},removeStatusHandler:function(e){var t=l.indexOf(e);t>=0&&l.splice(t,1)},data:a[t]};return n=void 0,o}var l=[],u="idle";function p(e){u=e;for(var t=0;t<l.length;t++)l[t].call(null,e)}var f,h,v,m,g=0,b=0,y={},x={},_={};function w(e){return+e+""===e?+e:e}function $(e){if("idle"!==u)throw new Error("check() is only allowed in idle status");return o=e,p("check"),(t=1e4,t=t||1e4,new Promise((function(e,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var o=new XMLHttpRequest,a=D.p+""+r+".hot-update.json";o.open("GET",a,!0),o.timeout=t,o.send(null)}catch(e){return n(e)}o.onreadystatechange=function(){if(4===o.readyState)if(0===o.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===o.status)e();else if(200!==o.status&&304!==o.status)n(new Error("Manifest request to "+a+" failed."));else{try{var t=JSON.parse(o.responseText)}catch(e){return void n(e)}e(t)}}}))).then((function(e){if(!e)return p(E()?"ready":"idle"),null;x={},y={},_=e.c,v=e.h,p("prepare");var t=new Promise((function(e,t){f={resolve:e,reject:t}}));h={};return O(0),"prepare"===u&&0===b&&0===g&&I(),t}));var t}function O(e){_[e]?(x[e]=!0,g++,function(e){var t=document.createElement("script");t.charset="utf-8",t.src=D.p+""+e+"."+r+".hot-update.js",document.head.appendChild(t)}(e)):y[e]=!0}function I(){p("ready");var e=f;if(f=null,e)if(o)Promise.resolve().then((function(){return j(o)})).then((function(t){e.resolve(t)}),(function(t){e.reject(t)}));else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(w(n));e.resolve(t)}}function j(t){if("ready"!==u)throw new Error("apply() is only allowed in ready status");return function t(o){var s,c,d,l,u;function f(e){for(var t=[e],n={},o=t.map((function(e){return{chain:[e],id:e}}));o.length>0;){var r=o.pop(),a=r.id,i=r.chain;if((l=C[a])&&(!l.hot._selfAccepted||l.hot._selfInvalidated)){if(l.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(l.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var s=0;s<l.parents.length;s++){var c=l.parents[s],d=C[c];if(d){if(d.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([c]),moduleId:a,parentId:c};-1===t.indexOf(c)&&(d.hot._acceptedDependencies[a]?(n[c]||(n[c]=[]),g(n[c],[a])):(delete n[c],t.push(c),o.push({chain:i.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function g(e,t){for(var n=0;n<t.length;n++){var o=t[n];-1===e.indexOf(o)&&e.push(o)}}E();var b={},y=[],x={},$=function(){console.warn("[HMR] unexpected require("+I.moduleId+") to disposed module")};for(var O in h)if(Object.prototype.hasOwnProperty.call(h,O)){var I;u=w(O),I=h[O]?f(u):{type:"disposed",moduleId:O};var j=!1,k=!1,P=!1,M="";switch(I.chain&&(M="\nUpdate propagation: "+I.chain.join(" -> ")),I.type){case"self-declined":o.onDeclined&&o.onDeclined(I),o.ignoreDeclined||(j=new Error("Aborted because of self decline: "+I.moduleId+M));break;case"declined":o.onDeclined&&o.onDeclined(I),o.ignoreDeclined||(j=new Error("Aborted because of declined dependency: "+I.moduleId+" in "+I.parentId+M));break;case"unaccepted":o.onUnaccepted&&o.onUnaccepted(I),o.ignoreUnaccepted||(j=new Error("Aborted because "+u+" is not accepted"+M));break;case"accepted":o.onAccepted&&o.onAccepted(I),k=!0;break;case"disposed":o.onDisposed&&o.onDisposed(I),P=!0;break;default:throw new Error("Unexception type "+I.type)}if(j)return p("abort"),Promise.reject(j);if(k)for(u in x[u]=h[u],g(y,I.outdatedModules),I.outdatedDependencies)Object.prototype.hasOwnProperty.call(I.outdatedDependencies,u)&&(b[u]||(b[u]=[]),g(b[u],I.outdatedDependencies[u]));P&&(g(y,[I.moduleId]),x[u]=$)}var S,A=[];for(c=0;c<y.length;c++)u=y[c],C[u]&&C[u].hot._selfAccepted&&x[u]!==$&&!C[u].hot._selfInvalidated&&A.push({module:u,parents:C[u].parents.slice(),errorHandler:C[u].hot._selfAccepted});p("dispose"),Object.keys(_).forEach((function(e){!1===_[e]&&function(e){delete installedChunks[e]}(e)}));var T,H,L=y.slice();for(;L.length>0;)if(u=L.pop(),l=C[u]){var q={},U=l.hot._disposeHandlers;for(d=0;d<U.length;d++)(s=U[d])(q);for(a[u]=q,l.hot.active=!1,delete C[u],delete b[u],d=0;d<l.children.length;d++){var R=C[l.children[d]];R&&((S=R.parents.indexOf(u))>=0&&R.parents.splice(S,1))}}for(u in b)if(Object.prototype.hasOwnProperty.call(b,u)&&(l=C[u]))for(H=b[u],d=0;d<H.length;d++)T=H[d],(S=l.children.indexOf(T))>=0&&l.children.splice(S,1);p("apply"),void 0!==v&&(r=v,v=void 0);for(u in h=void 0,x)Object.prototype.hasOwnProperty.call(x,u)&&(e[u]=x[u]);var z=null;for(u in b)if(Object.prototype.hasOwnProperty.call(b,u)&&(l=C[u])){H=b[u];var B=[];for(c=0;c<H.length;c++)if(T=H[c],s=l.hot._acceptedDependencies[T]){if(-1!==B.indexOf(s))continue;B.push(s)}for(c=0;c<B.length;c++){s=B[c];try{s(H)}catch(e){o.onErrored&&o.onErrored({type:"accept-errored",moduleId:u,dependencyId:H[c],error:e}),o.ignoreErrored||z||(z=e)}}}for(c=0;c<A.length;c++){var X=A[c];u=X.module,i=X.parents,n=u;try{D(u)}catch(e){if("function"==typeof X.errorHandler)try{X.errorHandler(e)}catch(t){o.onErrored&&o.onErrored({type:"self-accept-error-handler-errored",moduleId:u,error:t,originalError:e}),o.ignoreErrored||z||(z=t),z||(z=e)}else o.onErrored&&o.onErrored({type:"self-accept-errored",moduleId:u,error:e}),o.ignoreErrored||z||(z=e)}}if(z)return p("fail"),Promise.reject(z);if(m)return t(o).then((function(e){return y.forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}));return p("idle"),new Promise((function(e){e(y)}))}(t=t||{})}function E(){if(m)return h||(h={}),m.forEach(k),m=void 0,!0}function k(t){Object.prototype.hasOwnProperty.call(h,t)||(h[t]=e[t])}var C={};function D(t){if(C[t])return C[t].exports;var n=C[t]={i:t,l:!1,exports:{},hot:d(t),parents:(s=i,i=[],s),children:[]};return e[t].call(n.exports,n,n.exports,c(t)),n.l=!0,n.exports}D.m=e,D.c=C,D.d=function(e,t,n){D.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},D.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},D.t=function(e,t){if(1&t&&(e=D(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(D.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)D.d(n,o,function(t){return e[t]}.bind(null,o));return n},D.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return D.d(t,"a",t),t},D.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},D.p="",D.h=function(){return r},c("./src/js/index.js")(D.s="./src/js/index.js")}({"./src/js/index.js":function(e,t){console.log(1,1,1,1);var n=navigator.userAgent;n.indexOf("Android")>-1||n.indexOf("Adr"),n.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/),function(){var e=navigator.userAgent;navigator.appVersion;e.indexOf("Trident"),e.indexOf("Presto"),e.indexOf("AppleWebKit"),e.indexOf("Gecko")>-1&&e.indexOf("KHTML"),e.match(/AppleWebKit.*Mobile.*/),e.match(/\(i[^;]+;( U;)? CPU.+Mac OS X/),e.indexOf("Android")>-1||e.indexOf("Linux"),e.indexOf("iPhone"),e.indexOf("iPad"),e.indexOf("Safari")}(),(navigator.browserLanguage||navigator.language).toLowerCase();function o(e){window.txtCon=e.replace(/[\r\n]/g,"|").replace(/[\*\?]/g,"").replace(/\|$/,"")}var r=new XMLHttpRequest;r.onload=function(){o(r.responseText)};try{r.open("get","../sensitive_words_lines.txt",!0),r.send()}catch(e){console.log("catch"),o(e.message)}/Safari/.test(navigator.userAgent)&&/Chrome/.test(navigator.userAgent);$((function(){var e=document.getElementById("bgm");document.addEventListener("WeixinJSBridgeReady",(function(){e.play()}),!1),e.addEventListener("playing",(function(){$(".music").css("opacity","1"),$(".music").addClass("music_rotate")})),$(".music").on("click",(function(){$(this).hasClass("music_rotate")?($(this).removeClass("music_rotate"),e.pause()):($(this).addClass("music_rotate"),e.play())}));var t=document.documentElement.clientWidth,n=t/640,o=$(window).height()/n,r=document.documentElement.clientHeight;$(".box").css({scaleX:n,scaleY:n}),$("body").css({opacity:1}),$(".box").height(o),$(".close_btn").on("click",(function(){$(this).hasClass("start_btn")&&e.paused&&e.play(),$(this).parents(".pages").fadeOut(350),$(this).hasClass("receive_btn")&&setTimeout((function(){$(".zhongzi").css({opacity:1}),setTimeout((function(){$(".zhongzi").css({translate:[0,0]}),setTimeout((function(){$(".kettle_box,.water_btn").fadeIn(500)}),700)}),500)}),350)})),$(".poster_btn").on("click",(function(){$(".last").fadeIn(350)}));var a=0;$(".water_btn").on("click",(function(){if(0==a){s(160,(function(){$(".zhongzi").css({opacity:0,translate:[0,20],scale:.7}),setTimeout((function(){$(".plant>div").eq(a-1).css({opacity:1,scale:1})}),350)}))}else if(1==a){s(320,(function(){$(".plant>div").eq(a-2).css({opacity:0,scale:1.2}),setTimeout((function(){$(".plant>div").eq(a-1).css({opacity:1,scale:1})}),350)}))}else if(2==a){s(430,(function(){$(".plant>div").eq(a-2).css({opacity:0,scale:1.2}),setTimeout((function(){$(".plant>div").eq(a-1).css({opacity:1,scale:1})}),350)}))}else if(3==a){s(530,(function(){$(".plant>div").eq(a-2).css({opacity:0,scale:1}),setTimeout((function(){$(".plant>div").eq(a-1).css({opacity:1,scale:1}),$(".water_btn").fadeOut(350),$(".dress_btn").fadeIn(350)}),350)}))}})),$(".dress_btn").on("click",(function(){$(".dress_btn,.kettle_box").hide(),$(".plant").removeClass("swing1"),$(".choose_box").fadeIn(350)}));var i=!1;function s(e,t){if(i)return!1;$(".kettle_shadow").hide(),i=!0,$(".water_btn").removeClass("scale_back2"),a++,$(".kettle").transition({translate:[0,-e]}).transition({rotate:"-45deg",complete:function(){$(".sashui").transition({opacity:1},350).transition({translate:[-10,10],rotate:"28deg",opacity:0,complete:function(){setTimeout((function(){t()}),350),$(".kettle").transition({rotate:"0"},350).transition({translate:[0,0],complete:function(){i=!1,$(".water_btn").addClass("scale_back2"),$(".kettle_shadow").fadeIn(350)}},350)}},250).transition({translate:[0,0],rotate:"28deg",opacity:0},250)}},500)}document.querySelector("#name").addEventListener("input",(function(){for(var e=0,t=0;t<this.value.length;t++){var n=this.value.charCodeAt(t);if(n>=1&&n<=126||65376<=n&&n<=65439?e++:e+=2,e>8){console.log(this.value),this.value=this.value.substr(0,t);break}}})),$("#file").on("change",(function(){var e=this.files[0],n=new FileReader;n.readAsDataURL(e),n.onload=function(){$("#image").attr("src",n.result),function(){$(".cropperpage").show();var e=document.getElementById("image");c=new Cropper(e,{dragMode:"move",aspectRatio:1,viewMode:1,autoCropArea:.8,minContainerWidth:t,minContainerHeight:r,restore:!1,guides:!1,center:!1,highlight:!1,cropBoxMovable:!1,cropBoxResizable:!1,toggleDragModeOnDblclick:!1,ready:function(){d=!0}})}()}}));var c,d=!1;$("#edit").on("click",(function(){var e,t,n,o,r,a,i,s;($(".cropperpage").hide(),console.log(d),d)&&(e=c.getCroppedCanvas(),o=e,r=document.createElement("canvas"),a=r.getContext("2d"),i=o.width,s=o.height,r.width=i,r.height=s,a.imageSmoothingEnabled=!0,a.drawImage(o,0,0,i,s),a.globalCompositeOperation="destination-in",a.beginPath(),a.arc(i/2,s/2,Math.min(i,s)/2,0,2*Math.PI,!0),a.fill(),t=r,(n=document.createElement("img")).src=t.toDataURL(),$("#save").attr("src",n.src),$("#lastImg").attr("src",n.src),c.destroy())})),$("#cancle").on("click",(function(){$(".cropperpage").hide(),c.destroy()}));var l,u={expression:1,headdress:-1,handObject:-1},p=[16,46,48,49],f=localStorage.getItem("selfSite");if(!f){var h=Math.round(3*Math.random());f=p[h],localStorage.setItem("selfSite",p[h])}function v(e){$(".tip_page").fadeIn(350),$(".tips_word").text(e),setTimeout((function(){$(".tip_page").fadeOut(350)}),3e3)}console.log(f),$.ajax({url:"../js/cottonArr.json",type:"GET",dataType:"json",success:function(e){console.log("diyici"),$.ajax({url:"../js/site.json",type:"GET",dataType:"json",success:function(t){e.forEach((function(e,n){var o="0deg";0==Math.round(1*Math.random())&&(o="180deg");var r=t[n].left-380*(1-t[n].width/380)/2,a=t[n].top-573*(1-t[n].width/380)/2,i='<div class="plant" style="'+("-webkit-transform: scale("+t[n].width/380/1+");transform: scale("+t[n].width/380/1+");left:"+r+"px;top:"+a+"px;z-index:"+t[n]["z-index"]+";")+'"><span class="id_box">'+e.name+'</span><div class="four" style="transform:rotateY('+o+')"><div class="big_m"></div><div class="expression_box expression'+e.expression+' "></div><div class="handObject_box handObject'+e.handObject+'"></div><div class="headdress_box headdress'+e.headdress+'"></div></div></div>';$(".sp_box").append(i)}))}})}}),$(".choose_unit_box>div").on("click",(function(){var e=$(this).index();$(".choose_box").attr("chooseType",e+1),$(".choose_box").removeClass().addClass("choose_box choose"+(e+1))})),$(".add_box>div").on("click",(function(){var e,t=$(this).index(),n=1*$(".choose_box").attr("chooseType");switch(n){case 1:e="expression";break;case 2:e="headdress";break;case 3:e="handObject"}1==n&&$(".big_m1").hide(),console.log(n,e+"_box");var o="."+e+"_box";$(".water_bg").find(o).removeClass().addClass(e+"_box").addClass(e+t),u[e]=t,console.log(u)})),$(".com_btn").on("click",(function(){return""==$("#name").val()?(v("请输入昵称!"),!1):(txtCon=new RegExp(txtCon,"gi"),txtCon.test($("#name").val())&&v("昵称中包含敏感字符!"),"./images/photo.png"==$("#save").attr("src")?(v("请上传头像!"),!1):(l=$("#name").val(),$(".page2").fadeOut(350),function(e){var t,n=document.getElementById("canvas1"),o=n.getContext("2d");$(".name_box span").eq(1).text(l);var r=e.expression,a=e.headdress,i=e.handObject,s="./images/new/";-1==r&&r--;-1==a&&a--;-1==i&&i--;var c=new Image;c.src="./images/new/handObject/big_m.png",c.onload=function(){o.drawImage(c,0,0,348,266);var e=new Image;e.src=s+"expression/cc_"+(r+1)+".png",e.onload=function(){o.drawImage(e,0,0,348,266);var r=new Image;r.src=s+"headdress/cc_"+(a+1)+".png",r.onload=function(){o.drawImage(r,0,0,348,266);var e=new Image;e.src=s+"handObject/cc_"+(i+1)+".png",e.onload=function(){o.drawImage(e,0,0,348,266),t=n.toDataURL();var r=document.getElementById("canvas"),a=r.getContext("2d"),i=new Image;i.src="./images/save_img2.png",i.onload=function(){a.drawImage(i,0,0,492,661),a.drawImage(document.getElementById("save"),35,35,100,100),a.drawImage(document.getElementById("code"),376,510,78,78),a.drawImage(document.getElementById("name_box"),21,143,130,58),a.textAlign="center",a.font="20px 微软雅黑",a.fillText("用户ID",85,170),a.fillText(l,85,192);var e=new Image;e.src=t,$("#cloudImg").attr("src",t),e.onload=function(){a.translate(200,20),a.rotate(Math.PI/6),a.drawImage(e,15,-45,191.4,146.3),$("#s_Img").attr("src",r.toDataURL())}}}}}}}(u),$.each($(".sp_box .plant"),(function(){if($(this).css("zIndex")==f){console.log($(this).css("zIndex"));var e=u.expression,t=u.headdress,n=u.handObject;$(this).find(".expression_box").removeClass().addClass("expression_box expression"+e),$(this).find(".headdress_box").removeClass().addClass("headdress_box headdress"+t),$(this).find(".handObject_box").removeClass().addClass("handObject_box handObject"+n)}})),void(window.myScroll=new IScroll("#wrapper",{bounce:!1,scrollX:!0,scrollY:!1,mouseWheel:!0,startX:-640}))))})),window.myScroll=new IScroll("#wrapper",{bounce:!1,scrollX:!0,scrollY:!1,mouseWheel:!0,startX:-640}),myScroll.on("beforeScrollStart",(function(){$(".tips_img,.lf_txt").fadeOut(200)})),$(".tip_kuang").on("click",(function(){$(".tip_page").fadeOut(350)})),$(".share_img").on("click",(function(){setTimeout((function(){}),200)})),document.body.addEventListener("touchmove",(function(e){e.preventDefault()}),{passive:!1});var m=navigator.userAgent.toLowerCase(),g=null;(m.indexOf("iphone")>=0||m.indexOf("ipad")>=0)&&document.body.addEventListener("touchend",(function(e){var t=(new Date).getTime(),n=t-(g=g||t+1);if(n<500&&n>0)return e.preventDefault(),!1;g=t}),!1)}))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2luZGV4LmpzIl0sIm5hbWVzIjpbInBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrIiwid2luZG93IiwiY2h1bmtJZCIsIm1vcmVNb2R1bGVzIiwiaG90QXZhaWxhYmxlRmlsZXNNYXAiLCJob3RSZXF1ZXN0ZWRGaWxlc01hcCIsIm1vZHVsZUlkIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiaG90VXBkYXRlIiwiaG90V2FpdGluZ0ZpbGVzIiwiaG90Q2h1bmtzTG9hZGluZyIsImhvdFVwZGF0ZURvd25sb2FkZWQiLCJob3RBZGRVcGRhdGVDaHVuayIsImhvdEN1cnJlbnRDaGlsZE1vZHVsZSIsImhvdEFwcGx5T25VcGRhdGUiLCJob3RDdXJyZW50SGFzaCIsImhvdEN1cnJlbnRNb2R1bGVEYXRhIiwiaG90Q3VycmVudFBhcmVudHMiLCJob3RDdXJyZW50UGFyZW50c1RlbXAiLCJob3RDcmVhdGVSZXF1aXJlIiwibWUiLCJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsImZuIiwicmVxdWVzdCIsImhvdCIsImFjdGl2ZSIsInBhcmVudHMiLCJpbmRleE9mIiwicHVzaCIsImNoaWxkcmVuIiwiY29uc29sZSIsIndhcm4iLCJPYmplY3RGYWN0b3J5IiwibmFtZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsImRlZmluZVByb3BlcnR5IiwiZSIsImhvdFN0YXR1cyIsImhvdFNldFN0YXR1cyIsInRoZW4iLCJmaW5pc2hDaHVua0xvYWRpbmciLCJlcnIiLCJob3RXYWl0aW5nRmlsZXNNYXAiLCJob3RFbnN1cmVVcGRhdGVDaHVuayIsInQiLCJtb2RlIiwiaG90Q3JlYXRlTW9kdWxlIiwiX2FjY2VwdGVkRGVwZW5kZW5jaWVzIiwiX2RlY2xpbmVkRGVwZW5kZW5jaWVzIiwiX3NlbGZBY2NlcHRlZCIsIl9zZWxmRGVjbGluZWQiLCJfc2VsZkludmFsaWRhdGVkIiwiX2Rpc3Bvc2VIYW5kbGVycyIsIl9tYWluIiwiYWNjZXB0IiwiZGVwIiwiY2FsbGJhY2siLCJ1bmRlZmluZWQiLCJpIiwibGVuZ3RoIiwiZGVjbGluZSIsImRpc3Bvc2UiLCJhZGREaXNwb3NlSGFuZGxlciIsInJlbW92ZURpc3Bvc2VIYW5kbGVyIiwiaWR4Iiwic3BsaWNlIiwiaW52YWxpZGF0ZSIsInRoaXMiLCJtb2R1bGVzIiwiaG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZSIsImhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyIsImNoZWNrIiwiaG90Q2hlY2siLCJhcHBseSIsImhvdEFwcGx5Iiwic3RhdHVzIiwibCIsImhvdFN0YXR1c0hhbmRsZXJzIiwiYWRkU3RhdHVzSGFuZGxlciIsInJlbW92ZVN0YXR1c0hhbmRsZXIiLCJkYXRhIiwibmV3U3RhdHVzIiwiaG90RGVmZXJyZWQiLCJob3RVcGRhdGVOZXdIYXNoIiwidG9Nb2R1bGVJZCIsImlkIiwiRXJyb3IiLCJyZXF1ZXN0VGltZW91dCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiWE1MSHR0cFJlcXVlc3QiLCJyZXF1ZXN0UGF0aCIsInAiLCJvcGVuIiwidGltZW91dCIsInNlbmQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwidXBkYXRlIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiaG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMiLCJjIiwiaCIsInByb21pc2UiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjaGFyc2V0Iiwic3JjIiwiaGVhZCIsImFwcGVuZENoaWxkIiwiaG90RG93bmxvYWRVcGRhdGVDaHVuayIsImRlZmVycmVkIiwicmVzdWx0Iiwib3V0ZGF0ZWRNb2R1bGVzIiwib3B0aW9ucyIsImhvdEFwcGx5SW50ZXJuYWwiLCJjYiIsImoiLCJtb2R1bGUiLCJnZXRBZmZlY3RlZFN0dWZmIiwidXBkYXRlTW9kdWxlSWQiLCJvdXRkYXRlZERlcGVuZGVuY2llcyIsInF1ZXVlIiwibWFwIiwiY2hhaW4iLCJxdWV1ZUl0ZW0iLCJwb3AiLCJ0eXBlIiwicGFyZW50SWQiLCJwYXJlbnQiLCJjb25jYXQiLCJhZGRBbGxUb1NldCIsImEiLCJiIiwiaXRlbSIsImFwcGxpZWRVcGRhdGUiLCJ3YXJuVW5leHBlY3RlZFJlcXVpcmUiLCJhYm9ydEVycm9yIiwiZG9BcHBseSIsImRvRGlzcG9zZSIsImNoYWluSW5mbyIsImpvaW4iLCJvbkRlY2xpbmVkIiwiaWdub3JlRGVjbGluZWQiLCJvblVuYWNjZXB0ZWQiLCJpZ25vcmVVbmFjY2VwdGVkIiwib25BY2NlcHRlZCIsIm9uRGlzcG9zZWQiLCJvdXRkYXRlZFNlbGZBY2NlcHRlZE1vZHVsZXMiLCJzbGljZSIsImVycm9ySGFuZGxlciIsImtleXMiLCJmb3JFYWNoIiwiaW5zdGFsbGVkQ2h1bmtzIiwiaG90RGlzcG9zZUNodW5rIiwiZGVwZW5kZW5jeSIsIm1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzIiwiZGlzcG9zZUhhbmRsZXJzIiwiY2hpbGQiLCJlcnJvciIsImNhbGxiYWNrcyIsIm9uRXJyb3JlZCIsImRlcGVuZGVuY3lJZCIsImlnbm9yZUVycm9yZWQiLCJlcnIyIiwib3JpZ2luYWxFcnJvciIsImxpc3QiLCJleHBvcnRzIiwibSIsImQiLCJnZXR0ZXIiLCJvIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInMiLCJsb2ciLCJ1IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giLCJhcHBWZXJzaW9uIiwiYnJvd3Nlckxhbmd1YWdlIiwibGFuZ3VhZ2UiLCJ0b0xvd2VyQ2FzZSIsIlJlYWRGaWxlIiwidHh0Q29uIiwicmVwbGFjZSIsInhociIsIm9ubG9hZCIsImV4IiwibWVzc2FnZSIsInRlc3QiLCIkIiwiYmdtIiwiZ2V0RWxlbWVudEJ5SWQiLCJhZGRFdmVudExpc3RlbmVyIiwicGxheSIsImNzcyIsImFkZENsYXNzIiwib24iLCJoYXNDbGFzcyIsInJlbW92ZUNsYXNzIiwicGF1c2UiLCJzdGFnZVdpZHRoYSIsImRvY3VtZW50RWxlbWVudCIsImNsaWVudFdpZHRoIiwic3RhZ2VTY2FsZWEiLCJzdGFnZUhlaWdodCIsImhlaWdodCIsInNjcmVlbkhlaWdodCIsImNsaWVudEhlaWdodCIsInNjYWxlWCIsInNjYWxlWSIsInBhdXNlZCIsImZhZGVPdXQiLCJzZXRUaW1lb3V0IiwidHJhbnNsYXRlIiwiZmFkZUluIiwiaW5kZXgiLCJrZXR0bGVfbW9tdmUiLCJvcGFjaXR5Iiwic2NhbGUiLCJlcSIsImhpZGUiLCJrZXR0X2xvY2siLCJkaXN0YW5jZSIsInRyYW5zaXRpb24iLCJyb3RhdGUiLCJjb21wbGV0ZSIsInF1ZXJ5U2VsZWN0b3IiLCJ3IiwiY2hhckNvZGVBdCIsInN1YnN0ciIsImZpbGUiLCJmaWxlcyIsImZsIiwiRmlsZVJlYWRlciIsInJlYWRBc0RhdGFVUkwiLCJhdHRyIiwic2hvdyIsImltYWdlIiwiY3JvcHBlciIsIkNyb3BwZXIiLCJkcmFnTW9kZSIsImFzcGVjdFJhdGlvIiwidmlld01vZGUiLCJhdXRvQ3JvcEFyZWEiLCJtaW5Db250YWluZXJXaWR0aCIsIm1pbkNvbnRhaW5lckhlaWdodCIsInJlc3RvcmUiLCJndWlkZXMiLCJjZW50ZXIiLCJoaWdobGlnaHQiLCJjcm9wQm94TW92YWJsZSIsImNyb3BCb3hSZXNpemFibGUiLCJ0b2dnbGVEcmFnTW9kZU9uRGJsY2xpY2siLCJyZWFkeSIsImNyb3BwYWJsZSIsImNyb3BwSW1hZ2UiLCJjcm9wcGVkQ2FudmFzIiwicm91bmRlZENhbnZhcyIsInJvdW5kZWRJbWFnZSIsInNvdXJjZUNhbnZhcyIsImNhbnZhcyIsImNvbnRleHQiLCJ3aWR0aCIsImdldENyb3BwZWRDYW52YXMiLCJnZXRDb250ZXh0IiwiaW1hZ2VTbW9vdGhpbmdFbmFibGVkIiwiZHJhd0ltYWdlIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIm1pbiIsIlBJIiwiZmlsbCIsInRvRGF0YVVSTCIsImRlc3Ryb3kiLCJ0eHRfZ2VuIiwic2F2ZWFyciIsInNpdGVyIiwic2VsZlNpdGUiLCJsb2NhbFN0b3JhZ2UiLCJnZXRJdGVtIiwicm91bmQiLCJyYW5kb20iLCJzZXRJdGVtIiwic2hvd1RpcCIsInR4dCIsInRleHQiLCJhamF4IiwidXJsIiwiZGF0YVR5cGUiLCJzdWNjZXNzIiwiZGF0YWFyciIsImVsIiwicnkiLCJsZWZ0TnVtIiwibGVmdCIsIlRvcE51bSIsInRvcCIsImRpdlN0ciIsImFwcGVuZCIsImluZGV4XyIsInR5cGVDbGFzcyIsIiRjbGFzcyIsImZpbmQiLCJ2YWwiLCJSZWdFeHAiLCJjbG91ZEZhY2UiLCJjYW52YXMxIiwiY3R4IiwiaTEiLCJleHByZXNzaW9uIiwiaTIiLCJoZWFkZHJlc3MiLCJpMyIsImhhbmRPYmplY3QiLCJpbWdTcmMiLCJpbWFnZTAiLCJJbWFnZSIsImltYWdlMSIsImltYWdlMiIsImltYWdlMyIsInRleHRBbGlnbiIsImZvbnQiLCJmaWxsVGV4dCIsImltYWdlNCIsIkdlbmVyYXRlUG9zdGVyIiwiZWFjaCIsIm15U2Nyb2xsIiwiSVNjcm9sbCIsImJvdW5jZSIsInNjcm9sbFgiLCJzY3JvbGxZIiwibW91c2VXaGVlbCIsInN0YXJ0WCIsImJvZHkiLCJwcmV2ZW50RGVmYXVsdCIsInBhc3NpdmUiLCJhZ2VudCIsImlMYXN0VG91Y2giLCJldmVudCIsImlOb3ciLCJEYXRlIiwiZ2V0VGltZSIsImRlbHRhIl0sIm1hcHBpbmdzIjoiYUFHRSxJQUFJQSxFQUEwQkMsT0FBeUIsaUJBQ3ZEQSxPQUF5QixpQkFDekIsU0FBa0NDLEVBQVNDLElBdVMzQyxTQUEyQkQsRUFBU0MsR0FDbkMsSUFBS0MsRUFBcUJGLEtBQWFHLEVBQXFCSCxHQUMzRCxPQUVELElBQUssSUFBSUksS0FEVEQsRUFBcUJI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SSxpQkFBaUIsWUFBWSxTQUFVb0osR0FDbkQsSUFBSUMsR0FBTyxJQUFJQyxNQUNaQyxVQUVDQyxFQUFRSCxHQURaRixFQUFhQSxHQUFjRSxFQUFPLEdBRWxDLEdBQUlHLEVBQVEsS0FBT0EsRUFBUSxFQUV6QixPQURBSixFQUFNSixrQkFDQyxFQUVURyxFQUFhRSxLQUNaIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdGZ1bmN0aW9uIGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKSB7XG4gXHRcdGRlbGV0ZSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHR9XG4gXHR2YXIgcGFyZW50SG90VXBkYXRlQ2FsbGJhY2sgPSB3aW5kb3dbXCJ3ZWJwYWNrSG90VXBkYXRlXCJdO1xuIFx0d2luZG93W1wid2VicGFja0hvdFVwZGF0ZVwiXSA9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0ZnVuY3Rpb24gd2VicGFja0hvdFVwZGF0ZUNhbGxiYWNrKGNodW5rSWQsIG1vcmVNb2R1bGVzKSB7XG4gXHRcdGhvdEFkZFVwZGF0ZUNodW5rKGNodW5rSWQsIG1vcmVNb2R1bGVzKTtcbiBcdFx0aWYgKHBhcmVudEhvdFVwZGF0ZUNhbGxiYWNrKSBwYXJlbnRIb3RVcGRhdGVDYWxsYmFjayhjaHVua0lkLCBtb3JlTW9kdWxlcyk7XG4gXHR9IDtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpIHtcbiBcdFx0dmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gXHRcdHNjcmlwdC5jaGFyc2V0ID0gXCJ1dGYtOFwiO1xuIFx0XHRzY3JpcHQuc3JjID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArIGNodW5rSWQgKyBcIi5cIiArIGhvdEN1cnJlbnRIYXNoICsgXCIuaG90LXVwZGF0ZS5qc1wiO1xuIFx0XHRpZiAobnVsbCkgc2NyaXB0LmNyb3NzT3JpZ2luID0gbnVsbDtcbiBcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0fVxuXG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdGZ1bmN0aW9uIGhvdERvd25sb2FkTWFuaWZlc3QocmVxdWVzdFRpbWVvdXQpIHtcbiBcdFx0cmVxdWVzdFRpbWVvdXQgPSByZXF1ZXN0VGltZW91dCB8fCAxMDAwMDtcbiBcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgPT09IFwidW5kZWZpbmVkXCIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QobmV3IEVycm9yKFwiTm8gYnJvd3NlciBzdXBwb3J0XCIpKTtcbiBcdFx0XHR9XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdHZhciByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gXHRcdFx0XHR2YXIgcmVxdWVzdFBhdGggPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBcIlwiICsgaG90Q3VycmVudEhhc2ggKyBcIi5ob3QtdXBkYXRlLmpzb25cIjtcbiBcdFx0XHRcdHJlcXVlc3Qub3BlbihcIkdFVFwiLCByZXF1ZXN0UGF0aCwgdHJ1ZSk7XG4gXHRcdFx0XHRyZXF1ZXN0LnRpbWVvdXQgPSByZXF1ZXN0VGltZW91dDtcbiBcdFx0XHRcdHJlcXVlc3Quc2VuZChudWxsKTtcbiBcdFx0XHR9IGNhdGNoIChlcnIpIHtcbiBcdFx0XHRcdHJldHVybiByZWplY3QoZXJyKTtcbiBcdFx0XHR9XG4gXHRcdFx0cmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHJldHVybjtcbiBcdFx0XHRcdGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCkge1xuIFx0XHRcdFx0XHQvLyB0aW1lb3V0XG4gXHRcdFx0XHRcdHJlamVjdChcbiBcdFx0XHRcdFx0XHRuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiB0aW1lZCBvdXQuXCIpXG4gXHRcdFx0XHRcdCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzID09PSA0MDQpIHtcbiBcdFx0XHRcdFx0Ly8gbm8gdXBkYXRlIGF2YWlsYWJsZVxuIFx0XHRcdFx0XHRyZXNvbHZlKCk7XG4gXHRcdFx0XHR9IGVsc2UgaWYgKHJlcXVlc3Quc3RhdHVzICE9PSAyMDAgJiYgcmVxdWVzdC5zdGF0dXMgIT09IDMwNCkge1xuIFx0XHRcdFx0XHQvLyBvdGhlciBmYWlsdXJlXG4gXHRcdFx0XHRcdHJlamVjdChuZXcgRXJyb3IoXCJNYW5pZmVzdCByZXF1ZXN0IHRvIFwiICsgcmVxdWVzdFBhdGggKyBcIiBmYWlsZWQuXCIpKTtcbiBcdFx0XHRcdH0gZWxzZSB7XG4gXHRcdFx0XHRcdC8vIHN1Y2Nlc3NcbiBcdFx0XHRcdFx0dHJ5IHtcbiBcdFx0XHRcdFx0XHR2YXIgdXBkYXRlID0gSlNPTi5wYXJzZShyZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gXHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcbiBcdFx0XHRcdFx0XHRyZWplY3QoZSk7XG4gXHRcdFx0XHRcdFx0cmV0dXJuO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdHJlc29sdmUodXBkYXRlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9O1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0dmFyIGhvdEFwcGx5T25VcGRhdGUgPSB0cnVlO1xuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHR2YXIgaG90Q3VycmVudEhhc2ggPSBcImY4NTY4YzM3ZGU3MDQxNmE0MjdiXCI7XG4gXHR2YXIgaG90UmVxdWVzdFRpbWVvdXQgPSAxMDAwMDtcbiBcdHZhciBob3RDdXJyZW50TW9kdWxlRGF0YSA9IHt9O1xuIFx0dmFyIGhvdEN1cnJlbnRDaGlsZE1vZHVsZTtcbiBcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuIFx0dmFyIGhvdEN1cnJlbnRQYXJlbnRzID0gW107XG4gXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbiBcdHZhciBob3RDdXJyZW50UGFyZW50c1RlbXAgPSBbXTtcblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVSZXF1aXJlKG1vZHVsZUlkKSB7XG4gXHRcdHZhciBtZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRpZiAoIW1lKSByZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXztcbiBcdFx0dmFyIGZuID0gZnVuY3Rpb24ocmVxdWVzdCkge1xuIFx0XHRcdGlmIChtZS5ob3QuYWN0aXZlKSB7XG4gXHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XSkge1xuIFx0XHRcdFx0XHRpZiAoaW5zdGFsbGVkTW9kdWxlc1tyZXF1ZXN0XS5wYXJlbnRzLmluZGV4T2YobW9kdWxlSWQpID09PSAtMSkge1xuIFx0XHRcdFx0XHRcdGluc3RhbGxlZE1vZHVsZXNbcmVxdWVzdF0ucGFyZW50cy5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBbbW9kdWxlSWRdO1xuIFx0XHRcdFx0XHRob3RDdXJyZW50Q2hpbGRNb2R1bGUgPSByZXF1ZXN0O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKG1lLmNoaWxkcmVuLmluZGV4T2YocmVxdWVzdCkgPT09IC0xKSB7XG4gXHRcdFx0XHRcdG1lLmNoaWxkcmVuLnB1c2gocmVxdWVzdCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdGNvbnNvbGUud2FybihcbiBcdFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgK1xuIFx0XHRcdFx0XHRcdHJlcXVlc3QgK1xuIFx0XHRcdFx0XHRcdFwiKSBmcm9tIGRpc3Bvc2VkIG1vZHVsZSBcIiArXG4gXHRcdFx0XHRcdFx0bW9kdWxlSWRcbiBcdFx0XHRcdCk7XG4gXHRcdFx0XHRob3RDdXJyZW50UGFyZW50cyA9IFtdO1xuIFx0XHRcdH1cbiBcdFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhyZXF1ZXN0KTtcbiBcdFx0fTtcbiBcdFx0dmFyIE9iamVjdEZhY3RvcnkgPSBmdW5jdGlvbiBPYmplY3RGYWN0b3J5KG5hbWUpIHtcbiBcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG4gXHRcdFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fW25hbWVdO1xuIFx0XHRcdFx0fSxcbiBcdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiBcdFx0XHRcdFx0X193ZWJwYWNrX3JlcXVpcmVfX1tuYW1lXSA9IHZhbHVlO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH07XG4gXHRcdH07XG4gXHRcdGZvciAodmFyIG5hbWUgaW4gX193ZWJwYWNrX3JlcXVpcmVfXykge1xuIFx0XHRcdGlmIChcbiBcdFx0XHRcdE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChfX3dlYnBhY2tfcmVxdWlyZV9fLCBuYW1lKSAmJlxuIFx0XHRcdFx0bmFtZSAhPT0gXCJlXCIgJiZcbiBcdFx0XHRcdG5hbWUgIT09IFwidFwiXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sIG5hbWUsIE9iamVjdEZhY3RvcnkobmFtZSkpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRmbi5lID0gZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicmVhZHlcIikgaG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHRob3RDaHVua3NMb2FkaW5nKys7XG4gXHRcdFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18uZShjaHVua0lkKS50aGVuKGZpbmlzaENodW5rTG9hZGluZywgZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRmaW5pc2hDaHVua0xvYWRpbmcoKTtcbiBcdFx0XHRcdHRocm93IGVycjtcbiBcdFx0XHR9KTtcblxuIFx0XHRcdGZ1bmN0aW9uIGZpbmlzaENodW5rTG9hZGluZygpIHtcbiBcdFx0XHRcdGhvdENodW5rc0xvYWRpbmctLTtcbiBcdFx0XHRcdGlmIChob3RTdGF0dXMgPT09IFwicHJlcGFyZVwiKSB7XG4gXHRcdFx0XHRcdGlmICghaG90V2FpdGluZ0ZpbGVzTWFwW2NodW5rSWRdKSB7XG4gXHRcdFx0XHRcdFx0aG90RW5zdXJlVXBkYXRlQ2h1bmsoY2h1bmtJZCk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKGhvdENodW5rc0xvYWRpbmcgPT09IDAgJiYgaG90V2FpdGluZ0ZpbGVzID09PSAwKSB7XG4gXHRcdFx0XHRcdFx0aG90VXBkYXRlRG93bmxvYWRlZCgpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9O1xuIFx0XHRmbi50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0XHRpZiAobW9kZSAmIDEpIHZhbHVlID0gZm4odmFsdWUpO1xuIFx0XHRcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fLnQodmFsdWUsIG1vZGUgJiB+MSk7XG4gXHRcdH07XG4gXHRcdHJldHVybiBmbjtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpIHtcbiBcdFx0dmFyIGhvdCA9IHtcbiBcdFx0XHQvLyBwcml2YXRlIHN0dWZmXG4gXHRcdFx0X2FjY2VwdGVkRGVwZW5kZW5jaWVzOiB7fSxcbiBcdFx0XHRfZGVjbGluZWREZXBlbmRlbmNpZXM6IHt9LFxuIFx0XHRcdF9zZWxmQWNjZXB0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmRGVjbGluZWQ6IGZhbHNlLFxuIFx0XHRcdF9zZWxmSW52YWxpZGF0ZWQ6IGZhbHNlLFxuIFx0XHRcdF9kaXNwb3NlSGFuZGxlcnM6IFtdLFxuIFx0XHRcdF9tYWluOiBob3RDdXJyZW50Q2hpbGRNb2R1bGUgIT09IG1vZHVsZUlkLFxuXG4gXHRcdFx0Ly8gTW9kdWxlIEFQSVxuIFx0XHRcdGFjdGl2ZTogdHJ1ZSxcbiBcdFx0XHRhY2NlcHQ6IGZ1bmN0aW9uKGRlcCwgY2FsbGJhY2spIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmQWNjZXB0ZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJmdW5jdGlvblwiKSBob3QuX3NlbGZBY2NlcHRlZCA9IGRlcDtcbiBcdFx0XHRcdGVsc2UgaWYgKHR5cGVvZiBkZXAgPT09IFwib2JqZWN0XCIpXG4gXHRcdFx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZGVwLmxlbmd0aDsgaSsrKVxuIFx0XHRcdFx0XHRcdGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwW2ldXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0XHRlbHNlIGhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbZGVwXSA9IGNhbGxiYWNrIHx8IGZ1bmN0aW9uKCkge307XG4gXHRcdFx0fSxcbiBcdFx0XHRkZWNsaW5lOiBmdW5jdGlvbihkZXApIHtcbiBcdFx0XHRcdGlmIChkZXAgPT09IHVuZGVmaW5lZCkgaG90Ll9zZWxmRGVjbGluZWQgPSB0cnVlO1xuIFx0XHRcdFx0ZWxzZSBpZiAodHlwZW9mIGRlcCA9PT0gXCJvYmplY3RcIilcbiBcdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkZXAubGVuZ3RoOyBpKyspXG4gXHRcdFx0XHRcdFx0aG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBbaV1dID0gdHJ1ZTtcbiBcdFx0XHRcdGVsc2UgaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1tkZXBdID0gdHJ1ZTtcbiBcdFx0XHR9LFxuIFx0XHRcdGRpc3Bvc2U6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG4gXHRcdFx0XHRob3QuX2Rpc3Bvc2VIYW5kbGVycy5wdXNoKGNhbGxiYWNrKTtcbiBcdFx0XHR9LFxuIFx0XHRcdGFkZERpc3Bvc2VIYW5kbGVyOiBmdW5jdGlvbihjYWxsYmFjaykge1xuIFx0XHRcdFx0aG90Ll9kaXNwb3NlSGFuZGxlcnMucHVzaChjYWxsYmFjayk7XG4gXHRcdFx0fSxcbiBcdFx0XHRyZW1vdmVEaXNwb3NlSGFuZGxlcjogZnVuY3Rpb24oY2FsbGJhY2spIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3QuX2Rpc3Bvc2VIYW5kbGVycy5pbmRleE9mKGNhbGxiYWNrKTtcbiBcdFx0XHRcdGlmIChpZHggPj0gMCkgaG90Ll9kaXNwb3NlSGFuZGxlcnMuc3BsaWNlKGlkeCwgMSk7XG4gXHRcdFx0fSxcbiBcdFx0XHRpbnZhbGlkYXRlOiBmdW5jdGlvbigpIHtcbiBcdFx0XHRcdHRoaXMuX3NlbGZJbnZhbGlkYXRlZCA9IHRydWU7XG4gXHRcdFx0XHRzd2l0Y2ggKGhvdFN0YXR1cykge1xuIFx0XHRcdFx0XHRjYXNlIFwiaWRsZVwiOlxuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0XHRob3RTZXRTdGF0dXMoXCJyZWFkeVwiKTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcInJlYWR5XCI6XG4gXHRcdFx0XHRcdFx0aG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZShtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJwcmVwYXJlXCI6XG4gXHRcdFx0XHRcdGNhc2UgXCJjaGVja1wiOlxuIFx0XHRcdFx0XHRjYXNlIFwiZGlzcG9zZVwiOlxuIFx0XHRcdFx0XHRjYXNlIFwiYXBwbHlcIjpcbiBcdFx0XHRcdFx0XHQoaG90UXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzID1cbiBcdFx0XHRcdFx0XHRcdGhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyB8fCBbXSkucHVzaChtb2R1bGVJZCk7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0Ly8gaWdub3JlIHJlcXVlc3RzIGluIGVycm9yIHN0YXRlc1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0fVxuIFx0XHRcdH0sXG5cbiBcdFx0XHQvLyBNYW5hZ2VtZW50IEFQSVxuIFx0XHRcdGNoZWNrOiBob3RDaGVjayxcbiBcdFx0XHRhcHBseTogaG90QXBwbHksXG4gXHRcdFx0c3RhdHVzOiBmdW5jdGlvbihsKSB7XG4gXHRcdFx0XHRpZiAoIWwpIHJldHVybiBob3RTdGF0dXM7XG4gXHRcdFx0XHRob3RTdGF0dXNIYW5kbGVycy5wdXNoKGwpO1xuIFx0XHRcdH0sXG4gXHRcdFx0YWRkU3RhdHVzSGFuZGxlcjogZnVuY3Rpb24obCkge1xuIFx0XHRcdFx0aG90U3RhdHVzSGFuZGxlcnMucHVzaChsKTtcbiBcdFx0XHR9LFxuIFx0XHRcdHJlbW92ZVN0YXR1c0hhbmRsZXI6IGZ1bmN0aW9uKGwpIHtcbiBcdFx0XHRcdHZhciBpZHggPSBob3RTdGF0dXNIYW5kbGVycy5pbmRleE9mKGwpO1xuIFx0XHRcdFx0aWYgKGlkeCA+PSAwKSBob3RTdGF0dXNIYW5kbGVycy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHR9LFxuXG4gXHRcdFx0Ly9pbmhlcml0IGZyb20gcHJldmlvdXMgZGlzcG9zZSBjYWxsXG4gXHRcdFx0ZGF0YTogaG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdXG4gXHRcdH07XG4gXHRcdGhvdEN1cnJlbnRDaGlsZE1vZHVsZSA9IHVuZGVmaW5lZDtcbiBcdFx0cmV0dXJuIGhvdDtcbiBcdH1cblxuIFx0dmFyIGhvdFN0YXR1c0hhbmRsZXJzID0gW107XG4gXHR2YXIgaG90U3RhdHVzID0gXCJpZGxlXCI7XG5cbiBcdGZ1bmN0aW9uIGhvdFNldFN0YXR1cyhuZXdTdGF0dXMpIHtcbiBcdFx0aG90U3RhdHVzID0gbmV3U3RhdHVzO1xuIFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGhvdFN0YXR1c0hhbmRsZXJzLmxlbmd0aDsgaSsrKVxuIFx0XHRcdGhvdFN0YXR1c0hhbmRsZXJzW2ldLmNhbGwobnVsbCwgbmV3U3RhdHVzKTtcbiBcdH1cblxuIFx0Ly8gd2hpbGUgZG93bmxvYWRpbmdcbiBcdHZhciBob3RXYWl0aW5nRmlsZXMgPSAwO1xuIFx0dmFyIGhvdENodW5rc0xvYWRpbmcgPSAwO1xuIFx0dmFyIGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0dmFyIGhvdFJlcXVlc3RlZEZpbGVzTWFwID0ge307XG4gXHR2YXIgaG90QXZhaWxhYmxlRmlsZXNNYXAgPSB7fTtcbiBcdHZhciBob3REZWZlcnJlZDtcblxuIFx0Ly8gVGhlIHVwZGF0ZSBpbmZvXG4gXHR2YXIgaG90VXBkYXRlLCBob3RVcGRhdGVOZXdIYXNoLCBob3RRdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXM7XG5cbiBcdGZ1bmN0aW9uIHRvTW9kdWxlSWQoaWQpIHtcbiBcdFx0dmFyIGlzTnVtYmVyID0gK2lkICsgXCJcIiA9PT0gaWQ7XG4gXHRcdHJldHVybiBpc051bWJlciA/ICtpZCA6IGlkO1xuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RDaGVjayhhcHBseSkge1xuIFx0XHRpZiAoaG90U3RhdHVzICE9PSBcImlkbGVcIikge1xuIFx0XHRcdHRocm93IG5ldyBFcnJvcihcImNoZWNrKCkgaXMgb25seSBhbGxvd2VkIGluIGlkbGUgc3RhdHVzXCIpO1xuIFx0XHR9XG4gXHRcdGhvdEFwcGx5T25VcGRhdGUgPSBhcHBseTtcbiBcdFx0aG90U2V0U3RhdHVzKFwiY2hlY2tcIik7XG4gXHRcdHJldHVybiBob3REb3dubG9hZE1hbmlmZXN0KGhvdFJlcXVlc3RUaW1lb3V0KS50aGVuKGZ1bmN0aW9uKHVwZGF0ZSkge1xuIFx0XHRcdGlmICghdXBkYXRlKSB7XG4gXHRcdFx0XHRob3RTZXRTdGF0dXMoaG90QXBwbHlJbnZhbGlkYXRlZE1vZHVsZXMoKSA/IFwicmVhZHlcIiA6IFwiaWRsZVwiKTtcbiBcdFx0XHRcdHJldHVybiBudWxsO1xuIFx0XHRcdH1cbiBcdFx0XHRob3RSZXF1ZXN0ZWRGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdFdhaXRpbmdGaWxlc01hcCA9IHt9O1xuIFx0XHRcdGhvdEF2YWlsYWJsZUZpbGVzTWFwID0gdXBkYXRlLmM7XG4gXHRcdFx0aG90VXBkYXRlTmV3SGFzaCA9IHVwZGF0ZS5oO1xuXG4gXHRcdFx0aG90U2V0U3RhdHVzKFwicHJlcGFyZVwiKTtcbiBcdFx0XHR2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuIFx0XHRcdFx0aG90RGVmZXJyZWQgPSB7XG4gXHRcdFx0XHRcdHJlc29sdmU6IHJlc29sdmUsXG4gXHRcdFx0XHRcdHJlamVjdDogcmVqZWN0XG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdHZhciBjaHVua0lkID0gMDtcbiBcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbG9uZS1ibG9ja3NcbiBcdFx0XHR7XG4gXHRcdFx0XHRob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0aG90U3RhdHVzID09PSBcInByZXBhcmVcIiAmJlxuIFx0XHRcdFx0aG90Q2h1bmtzTG9hZGluZyA9PT0gMCAmJlxuIFx0XHRcdFx0aG90V2FpdGluZ0ZpbGVzID09PSAwXG4gXHRcdFx0KSB7XG4gXHRcdFx0XHRob3RVcGRhdGVEb3dubG9hZGVkKCk7XG4gXHRcdFx0fVxuIFx0XHRcdHJldHVybiBwcm9taXNlO1xuIFx0XHR9KTtcbiBcdH1cblxuIFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gXHRmdW5jdGlvbiBob3RBZGRVcGRhdGVDaHVuayhjaHVua0lkLCBtb3JlTW9kdWxlcykge1xuIFx0XHRpZiAoIWhvdEF2YWlsYWJsZUZpbGVzTWFwW2NodW5rSWRdIHx8ICFob3RSZXF1ZXN0ZWRGaWxlc01hcFtjaHVua0lkXSlcbiBcdFx0XHRyZXR1cm47XG4gXHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gZmFsc2U7XG4gXHRcdGZvciAodmFyIG1vZHVsZUlkIGluIG1vcmVNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRob3RVcGRhdGVbbW9kdWxlSWRdID0gbW9yZU1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRpZiAoLS1ob3RXYWl0aW5nRmlsZXMgPT09IDAgJiYgaG90Q2h1bmtzTG9hZGluZyA9PT0gMCkge1xuIFx0XHRcdGhvdFVwZGF0ZURvd25sb2FkZWQoKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RFbnN1cmVVcGRhdGVDaHVuayhjaHVua0lkKSB7XG4gXHRcdGlmICghaG90QXZhaWxhYmxlRmlsZXNNYXBbY2h1bmtJZF0pIHtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXNNYXBbY2h1bmtJZF0gPSB0cnVlO1xuIFx0XHR9IGVsc2Uge1xuIFx0XHRcdGhvdFJlcXVlc3RlZEZpbGVzTWFwW2NodW5rSWRdID0gdHJ1ZTtcbiBcdFx0XHRob3RXYWl0aW5nRmlsZXMrKztcbiBcdFx0XHRob3REb3dubG9hZFVwZGF0ZUNodW5rKGNodW5rSWQpO1xuIFx0XHR9XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdFVwZGF0ZURvd25sb2FkZWQoKSB7XG4gXHRcdGhvdFNldFN0YXR1cyhcInJlYWR5XCIpO1xuIFx0XHR2YXIgZGVmZXJyZWQgPSBob3REZWZlcnJlZDtcbiBcdFx0aG90RGVmZXJyZWQgPSBudWxsO1xuIFx0XHRpZiAoIWRlZmVycmVkKSByZXR1cm47XG4gXHRcdGlmIChob3RBcHBseU9uVXBkYXRlKSB7XG4gXHRcdFx0Ly8gV3JhcCBkZWZlcnJlZCBvYmplY3QgaW4gUHJvbWlzZSB0byBtYXJrIGl0IGFzIGEgd2VsbC1oYW5kbGVkIFByb21pc2UgdG9cbiBcdFx0XHQvLyBhdm9pZCB0cmlnZ2VyaW5nIHVuY2F1Z2h0IGV4Y2VwdGlvbiB3YXJuaW5nIGluIENocm9tZS5cbiBcdFx0XHQvLyBTZWUgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDY1NjY2XG4gXHRcdFx0UHJvbWlzZS5yZXNvbHZlKClcbiBcdFx0XHRcdC50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0XHRyZXR1cm4gaG90QXBwbHkoaG90QXBwbHlPblVwZGF0ZSk7XG4gXHRcdFx0XHR9KVxuIFx0XHRcdFx0LnRoZW4oXG4gXHRcdFx0XHRcdGZ1bmN0aW9uKHJlc3VsdCkge1xuIFx0XHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmUocmVzdWx0KTtcbiBcdFx0XHRcdFx0fSxcbiBcdFx0XHRcdFx0ZnVuY3Rpb24oZXJyKSB7XG4gXHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KGVycik7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdCk7XG4gXHRcdH0gZWxzZSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChob3RVcGRhdGUsIGlkKSkge1xuIFx0XHRcdFx0XHRvdXRkYXRlZE1vZHVsZXMucHVzaCh0b01vZHVsZUlkKGlkKSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHRcdGRlZmVycmVkLnJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseShvcHRpb25zKSB7XG4gXHRcdGlmIChob3RTdGF0dXMgIT09IFwicmVhZHlcIilcbiBcdFx0XHR0aHJvdyBuZXcgRXJyb3IoXCJhcHBseSgpIGlzIG9ubHkgYWxsb3dlZCBpbiByZWFkeSBzdGF0dXNcIik7XG4gXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuIFx0XHRyZXR1cm4gaG90QXBwbHlJbnRlcm5hbChvcHRpb25zKTtcbiBcdH1cblxuIFx0ZnVuY3Rpb24gaG90QXBwbHlJbnRlcm5hbChvcHRpb25zKSB7XG4gXHRcdGhvdEFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCk7XG5cbiBcdFx0dmFyIGNiO1xuIFx0XHR2YXIgaTtcbiBcdFx0dmFyIGo7XG4gXHRcdHZhciBtb2R1bGU7XG4gXHRcdHZhciBtb2R1bGVJZDtcblxuIFx0XHRmdW5jdGlvbiBnZXRBZmZlY3RlZFN0dWZmKHVwZGF0ZU1vZHVsZUlkKSB7XG4gXHRcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFt1cGRhdGVNb2R1bGVJZF07XG4gXHRcdFx0dmFyIG91dGRhdGVkRGVwZW5kZW5jaWVzID0ge307XG5cbiBcdFx0XHR2YXIgcXVldWUgPSBvdXRkYXRlZE1vZHVsZXMubWFwKGZ1bmN0aW9uKGlkKSB7XG4gXHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRjaGFpbjogW2lkXSxcbiBcdFx0XHRcdFx0aWQ6IGlkXG4gXHRcdFx0XHR9O1xuIFx0XHRcdH0pO1xuIFx0XHRcdHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gXHRcdFx0XHR2YXIgcXVldWVJdGVtID0gcXVldWUucG9wKCk7XG4gXHRcdFx0XHR2YXIgbW9kdWxlSWQgPSBxdWV1ZUl0ZW0uaWQ7XG4gXHRcdFx0XHR2YXIgY2hhaW4gPSBxdWV1ZUl0ZW0uY2hhaW47XG4gXHRcdFx0XHRtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdGlmIChcbiBcdFx0XHRcdFx0IW1vZHVsZSB8fFxuIFx0XHRcdFx0XHQobW9kdWxlLmhvdC5fc2VsZkFjY2VwdGVkICYmICFtb2R1bGUuaG90Ll9zZWxmSW52YWxpZGF0ZWQpXG4gXHRcdFx0XHQpXG4gXHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0aWYgKG1vZHVsZS5ob3QuX3NlbGZEZWNsaW5lZCkge1xuIFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdHR5cGU6IFwic2VsZi1kZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdGNoYWluOiBjaGFpbixcbiBcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWRcbiBcdFx0XHRcdFx0fTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChtb2R1bGUuaG90Ll9tYWluKSB7XG4gXHRcdFx0XHRcdHJldHVybiB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJ1bmFjY2VwdGVkXCIsXG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBtb2R1bGUucGFyZW50cy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgcGFyZW50SWQgPSBtb2R1bGUucGFyZW50c1tpXTtcbiBcdFx0XHRcdFx0dmFyIHBhcmVudCA9IGluc3RhbGxlZE1vZHVsZXNbcGFyZW50SWRdO1xuIFx0XHRcdFx0XHRpZiAoIXBhcmVudCkgY29udGludWU7XG4gXHRcdFx0XHRcdGlmIChwYXJlbnQuaG90Ll9kZWNsaW5lZERlcGVuZGVuY2llc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRcdFx0XHRyZXR1cm4ge1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJkZWNsaW5lZFwiLFxuIFx0XHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0XHRcdHBhcmVudElkOiBwYXJlbnRJZFxuIFx0XHRcdFx0XHRcdH07XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKG91dGRhdGVkTW9kdWxlcy5pbmRleE9mKHBhcmVudElkKSAhPT0gLTEpIGNvbnRpbnVlO1xuIFx0XHRcdFx0XHRpZiAocGFyZW50LmhvdC5fYWNjZXB0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0XHRcdFx0aWYgKCFvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0pXG4gXHRcdFx0XHRcdFx0XHRvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0gPSBbXTtcbiBcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF0sIFttb2R1bGVJZF0pO1xuIFx0XHRcdFx0XHRcdGNvbnRpbnVlO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdGRlbGV0ZSBvdXRkYXRlZERlcGVuZGVuY2llc1twYXJlbnRJZF07XG4gXHRcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5wdXNoKHBhcmVudElkKTtcbiBcdFx0XHRcdFx0cXVldWUucHVzaCh7XG4gXHRcdFx0XHRcdFx0Y2hhaW46IGNoYWluLmNvbmNhdChbcGFyZW50SWRdKSxcbiBcdFx0XHRcdFx0XHRpZDogcGFyZW50SWRcbiBcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuXG4gXHRcdFx0cmV0dXJuIHtcbiBcdFx0XHRcdHR5cGU6IFwiYWNjZXB0ZWRcIixcbiBcdFx0XHRcdG1vZHVsZUlkOiB1cGRhdGVNb2R1bGVJZCxcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlczogb3V0ZGF0ZWRNb2R1bGVzLFxuIFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXM6IG91dGRhdGVkRGVwZW5kZW5jaWVzXG4gXHRcdFx0fTtcbiBcdFx0fVxuXG4gXHRcdGZ1bmN0aW9uIGFkZEFsbFRvU2V0KGEsIGIpIHtcbiBcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGIubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdHZhciBpdGVtID0gYltpXTtcbiBcdFx0XHRcdGlmIChhLmluZGV4T2YoaXRlbSkgPT09IC0xKSBhLnB1c2goaXRlbSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gYXQgYmVnaW4gYWxsIHVwZGF0ZXMgbW9kdWxlcyBhcmUgb3V0ZGF0ZWRcbiBcdFx0Ly8gdGhlIFwib3V0ZGF0ZWRcIiBzdGF0dXMgY2FuIHByb3BhZ2F0ZSB0byBwYXJlbnRzIGlmIHRoZXkgZG9uJ3QgYWNjZXB0IHRoZSBjaGlsZHJlblxuIFx0XHR2YXIgb3V0ZGF0ZWREZXBlbmRlbmNpZXMgPSB7fTtcbiBcdFx0dmFyIG91dGRhdGVkTW9kdWxlcyA9IFtdO1xuIFx0XHR2YXIgYXBwbGllZFVwZGF0ZSA9IHt9O1xuXG4gXHRcdHZhciB3YXJuVW5leHBlY3RlZFJlcXVpcmUgPSBmdW5jdGlvbiB3YXJuVW5leHBlY3RlZFJlcXVpcmUoKSB7XG4gXHRcdFx0Y29uc29sZS53YXJuKFxuIFx0XHRcdFx0XCJbSE1SXSB1bmV4cGVjdGVkIHJlcXVpcmUoXCIgKyByZXN1bHQubW9kdWxlSWQgKyBcIikgdG8gZGlzcG9zZWQgbW9kdWxlXCJcbiBcdFx0XHQpO1xuIFx0XHR9O1xuXG4gXHRcdGZvciAodmFyIGlkIGluIGhvdFVwZGF0ZSkge1xuIFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaG90VXBkYXRlLCBpZCkpIHtcbiBcdFx0XHRcdG1vZHVsZUlkID0gdG9Nb2R1bGVJZChpZCk7XG4gXHRcdFx0XHQvKiogQHR5cGUge1RPRE99ICovXG4gXHRcdFx0XHR2YXIgcmVzdWx0O1xuIFx0XHRcdFx0aWYgKGhvdFVwZGF0ZVtpZF0pIHtcbiBcdFx0XHRcdFx0cmVzdWx0ID0gZ2V0QWZmZWN0ZWRTdHVmZihtb2R1bGVJZCk7XG4gXHRcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0XHRyZXN1bHQgPSB7XG4gXHRcdFx0XHRcdFx0dHlwZTogXCJkaXNwb3NlZFwiLFxuIFx0XHRcdFx0XHRcdG1vZHVsZUlkOiBpZFxuIFx0XHRcdFx0XHR9O1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0LyoqIEB0eXBlIHtFcnJvcnxmYWxzZX0gKi9cbiBcdFx0XHRcdHZhciBhYm9ydEVycm9yID0gZmFsc2U7XG4gXHRcdFx0XHR2YXIgZG9BcHBseSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGRvRGlzcG9zZSA9IGZhbHNlO1xuIFx0XHRcdFx0dmFyIGNoYWluSW5mbyA9IFwiXCI7XG4gXHRcdFx0XHRpZiAocmVzdWx0LmNoYWluKSB7XG4gXHRcdFx0XHRcdGNoYWluSW5mbyA9IFwiXFxuVXBkYXRlIHByb3BhZ2F0aW9uOiBcIiArIHJlc3VsdC5jaGFpbi5qb2luKFwiIC0+IFwiKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHN3aXRjaCAocmVzdWx0LnR5cGUpIHtcbiBcdFx0XHRcdFx0Y2FzZSBcInNlbGYtZGVjbGluZWRcIjpcbiBcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkRlY2xpbmVkKSBvcHRpb25zLm9uRGVjbGluZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRGVjbGluZWQpXG4gXHRcdFx0XHRcdFx0XHRhYm9ydEVycm9yID0gbmV3IEVycm9yKFxuIFx0XHRcdFx0XHRcdFx0XHRcIkFib3J0ZWQgYmVjYXVzZSBvZiBzZWxmIGRlY2xpbmU6IFwiICtcbiBcdFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQubW9kdWxlSWQgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImRlY2xpbmVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25EZWNsaW5lZCkgb3B0aW9ucy5vbkRlY2xpbmVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZURlY2xpbmVkKVxuIFx0XHRcdFx0XHRcdFx0YWJvcnRFcnJvciA9IG5ldyBFcnJvcihcbiBcdFx0XHRcdFx0XHRcdFx0XCJBYm9ydGVkIGJlY2F1c2Ugb2YgZGVjbGluZWQgZGVwZW5kZW5jeTogXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5tb2R1bGVJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0XCIgaW4gXCIgK1xuIFx0XHRcdFx0XHRcdFx0XHRcdHJlc3VsdC5wYXJlbnRJZCArXG4gXHRcdFx0XHRcdFx0XHRcdFx0Y2hhaW5JbmZvXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdGJyZWFrO1xuIFx0XHRcdFx0XHRjYXNlIFwidW5hY2NlcHRlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uVW5hY2NlcHRlZCkgb3B0aW9ucy5vblVuYWNjZXB0ZWQocmVzdWx0KTtcbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlVW5hY2NlcHRlZClcbiBcdFx0XHRcdFx0XHRcdGFib3J0RXJyb3IgPSBuZXcgRXJyb3IoXG4gXHRcdFx0XHRcdFx0XHRcdFwiQWJvcnRlZCBiZWNhdXNlIFwiICsgbW9kdWxlSWQgKyBcIiBpcyBub3QgYWNjZXB0ZWRcIiArIGNoYWluSW5mb1xuIFx0XHRcdFx0XHRcdFx0KTtcbiBcdFx0XHRcdFx0XHRicmVhaztcbiBcdFx0XHRcdFx0Y2FzZSBcImFjY2VwdGVkXCI6XG4gXHRcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25BY2NlcHRlZCkgb3B0aW9ucy5vbkFjY2VwdGVkKHJlc3VsdCk7XG4gXHRcdFx0XHRcdFx0ZG9BcHBseSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGNhc2UgXCJkaXNwb3NlZFwiOlxuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRGlzcG9zZWQpIG9wdGlvbnMub25EaXNwb3NlZChyZXN1bHQpO1xuIFx0XHRcdFx0XHRcdGRvRGlzcG9zZSA9IHRydWU7XG4gXHRcdFx0XHRcdFx0YnJlYWs7XG4gXHRcdFx0XHRcdGRlZmF1bHQ6XG4gXHRcdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKFwiVW5leGNlcHRpb24gdHlwZSBcIiArIHJlc3VsdC50eXBlKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdGlmIChhYm9ydEVycm9yKSB7XG4gXHRcdFx0XHRcdGhvdFNldFN0YXR1cyhcImFib3J0XCIpO1xuIFx0XHRcdFx0XHRyZXR1cm4gUHJvbWlzZS5yZWplY3QoYWJvcnRFcnJvcik7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRpZiAoZG9BcHBseSkge1xuIFx0XHRcdFx0XHRhcHBsaWVkVXBkYXRlW21vZHVsZUlkXSA9IGhvdFVwZGF0ZVttb2R1bGVJZF07XG4gXHRcdFx0XHRcdGFkZEFsbFRvU2V0KG91dGRhdGVkTW9kdWxlcywgcmVzdWx0Lm91dGRhdGVkTW9kdWxlcyk7XG4gXHRcdFx0XHRcdGZvciAobW9kdWxlSWQgaW4gcmVzdWx0Lm91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0XHRcdFx0aWYgKFxuIFx0XHRcdFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXMsXG4gXHRcdFx0XHRcdFx0XHRcdG1vZHVsZUlkXG4gXHRcdFx0XHRcdFx0XHQpXG4gXHRcdFx0XHRcdFx0KSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAoIW91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXSlcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdID0gW107XG4gXHRcdFx0XHRcdFx0XHRhZGRBbGxUb1NldChcbiBcdFx0XHRcdFx0XHRcdFx0b3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdLFxuIFx0XHRcdFx0XHRcdFx0XHRyZXN1bHQub3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdXG4gXHRcdFx0XHRcdFx0XHQpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdFx0aWYgKGRvRGlzcG9zZSkge1xuIFx0XHRcdFx0XHRhZGRBbGxUb1NldChvdXRkYXRlZE1vZHVsZXMsIFtyZXN1bHQubW9kdWxlSWRdKTtcbiBcdFx0XHRcdFx0YXBwbGllZFVwZGF0ZVttb2R1bGVJZF0gPSB3YXJuVW5leHBlY3RlZFJlcXVpcmU7XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gU3RvcmUgc2VsZiBhY2NlcHRlZCBvdXRkYXRlZCBtb2R1bGVzIHRvIHJlcXVpcmUgdGhlbSBsYXRlciBieSB0aGUgbW9kdWxlIHN5c3RlbVxuIFx0XHR2YXIgb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzID0gW107XG4gXHRcdGZvciAoaSA9IDA7IGkgPCBvdXRkYXRlZE1vZHVsZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRtb2R1bGVJZCA9IG91dGRhdGVkTW9kdWxlc1tpXTtcbiBcdFx0XHRpZiAoXG4gXHRcdFx0XHRpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSAmJlxuIFx0XHRcdFx0aW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmQWNjZXB0ZWQgJiZcbiBcdFx0XHRcdC8vIHJlbW92ZWQgc2VsZi1hY2NlcHRlZCBtb2R1bGVzIHNob3VsZCBub3QgYmUgcmVxdWlyZWRcbiBcdFx0XHRcdGFwcGxpZWRVcGRhdGVbbW9kdWxlSWRdICE9PSB3YXJuVW5leHBlY3RlZFJlcXVpcmUgJiZcbiBcdFx0XHRcdC8vIHdoZW4gY2FsbGVkIGludmFsaWRhdGUgc2VsZi1hY2NlcHRpbmcgaXMgbm90IHBvc3NpYmxlXG4gXHRcdFx0XHQhaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uaG90Ll9zZWxmSW52YWxpZGF0ZWRcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5wdXNoKHtcbiBcdFx0XHRcdFx0bW9kdWxlOiBtb2R1bGVJZCxcbiBcdFx0XHRcdFx0cGFyZW50czogaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0ucGFyZW50cy5zbGljZSgpLFxuIFx0XHRcdFx0XHRlcnJvckhhbmRsZXI6IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmhvdC5fc2VsZkFjY2VwdGVkXG4gXHRcdFx0XHR9KTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBOb3cgaW4gXCJkaXNwb3NlXCIgcGhhc2VcbiBcdFx0aG90U2V0U3RhdHVzKFwiZGlzcG9zZVwiKTtcbiBcdFx0T2JqZWN0LmtleXMoaG90QXZhaWxhYmxlRmlsZXNNYXApLmZvckVhY2goZnVuY3Rpb24oY2h1bmtJZCkge1xuIFx0XHRcdGlmIChob3RBdmFpbGFibGVGaWxlc01hcFtjaHVua0lkXSA9PT0gZmFsc2UpIHtcbiBcdFx0XHRcdGhvdERpc3Bvc2VDaHVuayhjaHVua0lkKTtcbiBcdFx0XHR9XG4gXHRcdH0pO1xuXG4gXHRcdHZhciBpZHg7XG4gXHRcdHZhciBxdWV1ZSA9IG91dGRhdGVkTW9kdWxlcy5zbGljZSgpO1xuIFx0XHR3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuIFx0XHRcdG1vZHVsZUlkID0gcXVldWUucG9wKCk7XG4gXHRcdFx0bW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0aWYgKCFtb2R1bGUpIGNvbnRpbnVlO1xuXG4gXHRcdFx0dmFyIGRhdGEgPSB7fTtcblxuIFx0XHRcdC8vIENhbGwgZGlzcG9zZSBoYW5kbGVyc1xuIFx0XHRcdHZhciBkaXNwb3NlSGFuZGxlcnMgPSBtb2R1bGUuaG90Ll9kaXNwb3NlSGFuZGxlcnM7XG4gXHRcdFx0Zm9yIChqID0gMDsgaiA8IGRpc3Bvc2VIYW5kbGVycy5sZW5ndGg7IGorKykge1xuIFx0XHRcdFx0Y2IgPSBkaXNwb3NlSGFuZGxlcnNbal07XG4gXHRcdFx0XHRjYihkYXRhKTtcbiBcdFx0XHR9XG4gXHRcdFx0aG90Q3VycmVudE1vZHVsZURhdGFbbW9kdWxlSWRdID0gZGF0YTtcblxuIFx0XHRcdC8vIGRpc2FibGUgbW9kdWxlICh0aGlzIGRpc2FibGVzIHJlcXVpcmVzIGZyb20gdGhpcyBtb2R1bGUpXG4gXHRcdFx0bW9kdWxlLmhvdC5hY3RpdmUgPSBmYWxzZTtcblxuIFx0XHRcdC8vIHJlbW92ZSBtb2R1bGUgZnJvbSBjYWNoZVxuIFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXTtcblxuIFx0XHRcdC8vIHdoZW4gZGlzcG9zaW5nIHRoZXJlIGlzIG5vIG5lZWQgdG8gY2FsbCBkaXNwb3NlIGhhbmRsZXJcbiBcdFx0XHRkZWxldGUgb3V0ZGF0ZWREZXBlbmRlbmNpZXNbbW9kdWxlSWRdO1xuXG4gXHRcdFx0Ly8gcmVtb3ZlIFwicGFyZW50c1wiIHJlZmVyZW5jZXMgZnJvbSBhbGwgY2hpbGRyZW5cbiBcdFx0XHRmb3IgKGogPSAwOyBqIDwgbW9kdWxlLmNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHR2YXIgY2hpbGQgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZS5jaGlsZHJlbltqXV07XG4gXHRcdFx0XHRpZiAoIWNoaWxkKSBjb250aW51ZTtcbiBcdFx0XHRcdGlkeCA9IGNoaWxkLnBhcmVudHMuaW5kZXhPZihtb2R1bGVJZCk7XG4gXHRcdFx0XHRpZiAoaWR4ID49IDApIHtcbiBcdFx0XHRcdFx0Y2hpbGQucGFyZW50cy5zcGxpY2UoaWR4LCAxKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyByZW1vdmUgb3V0ZGF0ZWQgZGVwZW5kZW5jeSBmcm9tIG1vZHVsZSBjaGlsZHJlblxuIFx0XHR2YXIgZGVwZW5kZW5jeTtcbiBcdFx0dmFyIG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0Zm9yIChqID0gMDsgaiA8IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzLmxlbmd0aDsgaisrKSB7XG4gXHRcdFx0XHRcdFx0ZGVwZW5kZW5jeSA9IG1vZHVsZU91dGRhdGVkRGVwZW5kZW5jaWVzW2pdO1xuIFx0XHRcdFx0XHRcdGlkeCA9IG1vZHVsZS5jaGlsZHJlbi5pbmRleE9mKGRlcGVuZGVuY3kpO1xuIFx0XHRcdFx0XHRcdGlmIChpZHggPj0gMCkgbW9kdWxlLmNoaWxkcmVuLnNwbGljZShpZHgsIDEpO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTm93IGluIFwiYXBwbHlcIiBwaGFzZVxuIFx0XHRob3RTZXRTdGF0dXMoXCJhcHBseVwiKTtcblxuIFx0XHRpZiAoaG90VXBkYXRlTmV3SGFzaCAhPT0gdW5kZWZpbmVkKSB7XG4gXHRcdFx0aG90Q3VycmVudEhhc2ggPSBob3RVcGRhdGVOZXdIYXNoO1xuIFx0XHRcdGhvdFVwZGF0ZU5ld0hhc2ggPSB1bmRlZmluZWQ7XG4gXHRcdH1cbiBcdFx0aG90VXBkYXRlID0gdW5kZWZpbmVkO1xuXG4gXHRcdC8vIGluc2VydCBuZXcgY29kZVxuIFx0XHRmb3IgKG1vZHVsZUlkIGluIGFwcGxpZWRVcGRhdGUpIHtcbiBcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGFwcGxpZWRVcGRhdGUsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBhcHBsaWVkVXBkYXRlW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cblxuIFx0XHQvLyBjYWxsIGFjY2VwdCBoYW5kbGVyc1xuIFx0XHR2YXIgZXJyb3IgPSBudWxsO1xuIFx0XHRmb3IgKG1vZHVsZUlkIGluIG91dGRhdGVkRGVwZW5kZW5jaWVzKSB7XG4gXHRcdFx0aWYgKFxuIFx0XHRcdFx0T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG91dGRhdGVkRGVwZW5kZW5jaWVzLCBtb2R1bGVJZClcbiBcdFx0XHQpIHtcbiBcdFx0XHRcdG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdO1xuIFx0XHRcdFx0aWYgKG1vZHVsZSkge1xuIFx0XHRcdFx0XHRtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyA9IG91dGRhdGVkRGVwZW5kZW5jaWVzW21vZHVsZUlkXTtcbiBcdFx0XHRcdFx0dmFyIGNhbGxiYWNrcyA9IFtdO1xuIFx0XHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXMubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0XHRkZXBlbmRlbmN5ID0gbW9kdWxlT3V0ZGF0ZWREZXBlbmRlbmNpZXNbaV07XG4gXHRcdFx0XHRcdFx0Y2IgPSBtb2R1bGUuaG90Ll9hY2NlcHRlZERlcGVuZGVuY2llc1tkZXBlbmRlbmN5XTtcbiBcdFx0XHRcdFx0XHRpZiAoY2IpIHtcbiBcdFx0XHRcdFx0XHRcdGlmIChjYWxsYmFja3MuaW5kZXhPZihjYikgIT09IC0xKSBjb250aW51ZTtcbiBcdFx0XHRcdFx0XHRcdGNhbGxiYWNrcy5wdXNoKGNiKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0Zm9yIChpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHRcdGNiID0gY2FsbGJhY2tzW2ldO1xuIFx0XHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0XHRjYihtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llcyk7XG4gXHRcdFx0XHRcdFx0fSBjYXRjaCAoZXJyKSB7XG4gXHRcdFx0XHRcdFx0XHRpZiAob3B0aW9ucy5vbkVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHRcdHR5cGU6IFwiYWNjZXB0LWVycm9yZWRcIixcbiBcdFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdFx0ZGVwZW5kZW5jeUlkOiBtb2R1bGVPdXRkYXRlZERlcGVuZGVuY2llc1tpXSxcbiBcdFx0XHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnI7XG4gXHRcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0Ly8gTG9hZCBzZWxmIGFjY2VwdGVkIG1vZHVsZXNcbiBcdFx0Zm9yIChpID0gMDsgaSA8IG91dGRhdGVkU2VsZkFjY2VwdGVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBpdGVtID0gb3V0ZGF0ZWRTZWxmQWNjZXB0ZWRNb2R1bGVzW2ldO1xuIFx0XHRcdG1vZHVsZUlkID0gaXRlbS5tb2R1bGU7XG4gXHRcdFx0aG90Q3VycmVudFBhcmVudHMgPSBpdGVtLnBhcmVudHM7XG4gXHRcdFx0aG90Q3VycmVudENoaWxkTW9kdWxlID0gbW9kdWxlSWQ7XG4gXHRcdFx0dHJ5IHtcbiBcdFx0XHRcdF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpO1xuIFx0XHRcdH0gY2F0Y2ggKGVycikge1xuIFx0XHRcdFx0aWYgKHR5cGVvZiBpdGVtLmVycm9ySGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gXHRcdFx0XHRcdHRyeSB7XG4gXHRcdFx0XHRcdFx0aXRlbS5lcnJvckhhbmRsZXIoZXJyKTtcbiBcdFx0XHRcdFx0fSBjYXRjaCAoZXJyMikge1xuIFx0XHRcdFx0XHRcdGlmIChvcHRpb25zLm9uRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0XHR0eXBlOiBcInNlbGYtYWNjZXB0LWVycm9yLWhhbmRsZXItZXJyb3JlZFwiLFxuIFx0XHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBlcnIyLFxuIFx0XHRcdFx0XHRcdFx0XHRvcmlnaW5hbEVycm9yOiBlcnJcbiBcdFx0XHRcdFx0XHRcdH0pO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIW9wdGlvbnMuaWdub3JlRXJyb3JlZCkge1xuIFx0XHRcdFx0XHRcdFx0aWYgKCFlcnJvcikgZXJyb3IgPSBlcnIyO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdFx0aWYgKG9wdGlvbnMub25FcnJvcmVkKSB7XG4gXHRcdFx0XHRcdFx0b3B0aW9ucy5vbkVycm9yZWQoe1xuIFx0XHRcdFx0XHRcdFx0dHlwZTogXCJzZWxmLWFjY2VwdC1lcnJvcmVkXCIsXG4gXHRcdFx0XHRcdFx0XHRtb2R1bGVJZDogbW9kdWxlSWQsXG4gXHRcdFx0XHRcdFx0XHRlcnJvcjogZXJyXG4gXHRcdFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0aWYgKCFvcHRpb25zLmlnbm9yZUVycm9yZWQpIHtcbiBcdFx0XHRcdFx0XHRpZiAoIWVycm9yKSBlcnJvciA9IGVycjtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fVxuIFx0XHRcdH1cbiBcdFx0fVxuXG4gXHRcdC8vIGhhbmRsZSBlcnJvcnMgaW4gYWNjZXB0IGhhbmRsZXJzIGFuZCBzZWxmIGFjY2VwdGVkIG1vZHVsZSBsb2FkXG4gXHRcdGlmIChlcnJvcikge1xuIFx0XHRcdGhvdFNldFN0YXR1cyhcImZhaWxcIik7XG4gXHRcdFx0cmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiBcdFx0fVxuXG4gXHRcdGlmIChob3RRdWV1ZWRJbnZhbGlkYXRlZE1vZHVsZXMpIHtcbiBcdFx0XHRyZXR1cm4gaG90QXBwbHlJbnRlcm5hbChvcHRpb25zKS50aGVuKGZ1bmN0aW9uKGxpc3QpIHtcbiBcdFx0XHRcdG91dGRhdGVkTW9kdWxlcy5mb3JFYWNoKGZ1bmN0aW9uKG1vZHVsZUlkKSB7XG4gXHRcdFx0XHRcdGlmIChsaXN0LmluZGV4T2YobW9kdWxlSWQpIDwgMCkgbGlzdC5wdXNoKG1vZHVsZUlkKTtcbiBcdFx0XHRcdH0pO1xuIFx0XHRcdFx0cmV0dXJuIGxpc3Q7XG4gXHRcdFx0fSk7XG4gXHRcdH1cblxuIFx0XHRob3RTZXRTdGF0dXMoXCJpZGxlXCIpO1xuIFx0XHRyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSkge1xuIFx0XHRcdHJlc29sdmUob3V0ZGF0ZWRNb2R1bGVzKTtcbiBcdFx0fSk7XG4gXHR9XG5cbiBcdGZ1bmN0aW9uIGhvdEFwcGx5SW52YWxpZGF0ZWRNb2R1bGVzKCkge1xuIFx0XHRpZiAoaG90UXVldWVkSW52YWxpZGF0ZWRNb2R1bGVzKSB7XG4gXHRcdFx0aWYgKCFob3RVcGRhdGUpIGhvdFVwZGF0ZSA9IHt9O1xuIFx0XHRcdGhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcy5mb3JFYWNoKGhvdEFwcGx5SW52YWxpZGF0ZWRNb2R1bGUpO1xuIFx0XHRcdGhvdFF1ZXVlZEludmFsaWRhdGVkTW9kdWxlcyA9IHVuZGVmaW5lZDtcbiBcdFx0XHRyZXR1cm4gdHJ1ZTtcbiBcdFx0fVxuIFx0fVxuXG4gXHRmdW5jdGlvbiBob3RBcHBseUludmFsaWRhdGVkTW9kdWxlKG1vZHVsZUlkKSB7XG4gXHRcdGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGhvdFVwZGF0ZSwgbW9kdWxlSWQpKVxuIFx0XHRcdGhvdFVwZGF0ZVttb2R1bGVJZF0gPSBtb2R1bGVzW21vZHVsZUlkXTtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aG90OiBob3RDcmVhdGVNb2R1bGUobW9kdWxlSWQpLFxuIFx0XHRcdHBhcmVudHM6IChob3RDdXJyZW50UGFyZW50c1RlbXAgPSBob3RDdXJyZW50UGFyZW50cywgaG90Q3VycmVudFBhcmVudHMgPSBbXSwgaG90Q3VycmVudFBhcmVudHNUZW1wKSxcbiBcdFx0XHRjaGlsZHJlbjogW11cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgaG90Q3JlYXRlUmVxdWlyZShtb2R1bGVJZCkpO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIF9fd2VicGFja19oYXNoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18uaCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gaG90Q3VycmVudEhhc2g7IH07XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gaG90Q3JlYXRlUmVxdWlyZShcIi4vc3JjL2pzL2luZGV4LmpzXCIpKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvanMvaW5kZXguanNcIik7XG4iLCIvLyBpbXBvcnQgTWludCBmcm9tICdtaW50LWZpbHRlcidcclxuY29uc29sZS5sb2coMSwgMSwgMSwgMSlcclxudmFyIHUgPSBuYXZpZ2F0b3IudXNlckFnZW50O1xyXG52YXIgaXNBbmRyb2lkID0gdS5pbmRleE9mKCdBbmRyb2lkJykgPiAtMSB8fCB1LmluZGV4T2YoJ0FkcicpID4gLTE7IC8vYW5kcm9pZOe7iOerr1xyXG52YXIgaXNpT1MgPSAhIXUubWF0Y2goL1xcKGlbXjtdKzsoIFU7KT8gQ1BVLitNYWMgT1MgWC8pOyAvL2lvc+e7iOerr1xyXG52YXIgYnJvd3NlciA9IHtcclxuICB2ZXJzaW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHUgPSBuYXZpZ2F0b3IudXNlckFnZW50LFxyXG4gICAgICBhcHAgPSBuYXZpZ2F0b3IuYXBwVmVyc2lvbjtcclxuICAgIHJldHVybiB7IC8v56e75Yqo57uI56uv5rWP6KeI5Zmo54mI5pys5L+h5oGvXHJcbiAgICAgIHRyaWRlbnQ6IHUuaW5kZXhPZignVHJpZGVudCcpID4gLTEsIC8vSUXlhoXmoLhcclxuICAgICAgcHJlc3RvOiB1LmluZGV4T2YoJ1ByZXN0bycpID4gLTEsIC8vb3BlcmHlhoXmoLhcclxuICAgICAgd2ViS2l0OiB1LmluZGV4T2YoJ0FwcGxlV2ViS2l0JykgPiAtMSwgLy/oi7nmnpzjgIHosLfmrYzlhoXmoLhcclxuICAgICAgZ2Vja286IHUuaW5kZXhPZignR2Vja28nKSA+IC0xICYmIHUuaW5kZXhPZignS0hUTUwnKSA9PSAtMSwgLy/ngavni5DlhoXmoLhcclxuICAgICAgbW9iaWxlOiAhIXUubWF0Y2goL0FwcGxlV2ViS2l0LipNb2JpbGUuKi8pLCAvL+aYr+WQpuS4uuenu+WKqOe7iOerr1xyXG4gICAgICBpb3M6ICEhdS5tYXRjaCgvXFwoaVteO10rOyggVTspPyBDUFUuK01hYyBPUyBYLyksIC8vaW9z57uI56uvXHJcbiAgICAgIGFuZHJvaWQ6IHUuaW5kZXhPZignQW5kcm9pZCcpID4gLTEgfHwgdS5pbmRleE9mKCdMaW51eCcpID4gLTEsIC8vYW5kcm9pZOe7iOerr+aIlnVj5rWP6KeI5ZmoXHJcbiAgICAgIGlQaG9uZTogdS5pbmRleE9mKCdpUGhvbmUnKSA+IC0xLCAvL+aYr+WQpuS4umlQaG9uZeaIluiAhVFRSETmtY/op4jlmahcclxuICAgICAgaVBhZDogdS5pbmRleE9mKCdpUGFkJykgPiAtMSwgLy/mmK/lkKZpUGFkXHJcbiAgICAgIHdlYkFwcDogdS5pbmRleE9mKCdTYWZhcmknKSA9PSAtMSAvL+aYr+WQpndlYuW6lOivpeeoi+W6j++8jOayoeacieWktOmDqOS4juW6lemDqFxyXG4gICAgfTtcclxuICB9KCksXHJcbiAgbGFuZ3VhZ2U6IChuYXZpZ2F0b3IuYnJvd3Nlckxhbmd1YWdlIHx8IG5hdmlnYXRvci5sYW5ndWFnZSkudG9Mb3dlckNhc2UoKVxyXG59XHJcblxyXG5mdW5jdGlvbiBSZWFkRmlsZShkYXRhKSB7XHJcbiAgLy8gY29uc29sZS5sb2coZGF0YSlcclxuICAvLyB2YXIgZGF0YSA9IFwiZ2F55ZCM5b+XXFxyXFxu5aSn5a6255yL5b6X6KeBXFxyXFxuXCI7XHJcbiAgd2luZG93LnR4dENvbiA9IGRhdGEucmVwbGFjZSgvW1xcclxcbl0vZywgXCJ8XCIpLnJlcGxhY2UoL1tcXCpcXD9dL2csIFwiXCIpLnJlcGxhY2UoL1xcfCQvLCBcIlwiKTtcclxuICAvLyB3aW5kb3cudHh0Q29uID0gZGF0YS5yZXBsYWNlKC9bXFxyXFxuXS9nLCBcInxcIikucmVwbGFjZSgvW1xcKlxcP10vZywgXCJcIikucmVwbGFjZSgvXFx8JC8sIFwiXCIpLnNwbGl0KCd8Jyk7XHJcbiAgLy8gdHh0Q29uID0gbmV3IFJlZ0V4cCh0eHRDb24sICdnaScpO1xyXG4gIC8vIGNvbnNvbGUubG9nKHR4dENvbilcclxuICAvLyBjb25zb2xlLmxvZyh0eHRDb24udGVzdChcIuilv+eTnOWunTIy5rSBMTFcIikpXHJcbn1cclxudmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG54aHIub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gIFJlYWRGaWxlKHhoci5yZXNwb25zZVRleHQpO1xyXG59O1xyXG50cnkge1xyXG4gIHhoci5vcGVuKFwiZ2V0XCIsIFwiLi4vc2Vuc2l0aXZlX3dvcmRzX2xpbmVzLnR4dFwiLCB0cnVlKTtcclxuICB4aHIuc2VuZCgpO1xyXG59IGNhdGNoIChleCkge1xyXG4gIGNvbnNvbGUubG9nKFwiY2F0Y2hcIilcclxuICBSZWFkRmlsZShleC5tZXNzYWdlKTtcclxufVxyXG5cclxuXHJcblxyXG5cclxuaWYgKC9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiYgIS9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsgLy/liKTmlq3mmK/lkKZzYWZhcmlcclxuXHJcbn0gZWxzZSB7XHJcblxyXG59XHJcblxyXG5cclxuXHJcbnZhciBudW0gPSAxO1xyXG52YXIgbGlzdCA9IFtdO1xyXG52YXIgaW1nQXJyID0gW1xyXG4gIFwiaW1hZ2VzL2luZGV4X2JnLmpwZ1wiLCBcImltYWdlcy9iaWdfYmcuanBnXCJcclxuXVxyXG4vLyBmb3IgKGxldCBpID0gMDsgaSA8IGltZ0Fyci5sZW5ndGg7IGkrKykge1xyXG4vLyAgIGNvbnN0IGVsID0gaW1nQXJyW2ldO1xyXG4vLyAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuLy8gICBpbWcuc3JjID0gZWw7XHJcbi8vICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XHJcbi8vICAgICBpZiAoaSA9PSBpbWdBcnIubGVuZ3RoIC0gMSkge1xyXG4vLyAgICAgICBjb25zb2xlLmxvZygnaml6YWl3YW5jaGVuZycpO1xyXG4vLyAgICAgfVxyXG4vLyAgIH1cclxuLy8gfVxyXG5cclxuXHJcblxyXG5cclxuZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmcobmFtZSkge1xyXG4gIHZhciByZWcgPSBuZXcgUmVnRXhwKFwiKF58JilcIiArIG5hbWUgKyBcIj0oW14mXSopKCZ8JClcIiwgXCJpXCIpO1xyXG4gIHZhciByID0gd2luZG93LmxvY2F0aW9uLnNlYXJjaC5zdWJzdHIoMSkubWF0Y2gocmVnKTtcclxuICBpZiAociAhPSBudWxsKSByZXR1cm4gdW5lc2NhcGUoclsyXSk7XHJcbiAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiQoZnVuY3Rpb24gKCkge1xyXG4gIC8vICQoXCIucHJvX2luc2lkZVwiKS5hbmltYXRlKHt3aWR0aDonMTAwJSd9LDE1MDAsKCk9PntcclxuICAvLyAgICQoXCIubG9hZGluZ1wiKS5mYWRlT3V0KDUwMCk7XHJcbiAgLy8gfSk7XHJcblxyXG4gIHZhciBiZ20gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImJnbVwiKTtcclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiV2VpeGluSlNCcmlkZ2VSZWFkeVwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBiZ20ucGxheSgpO1xyXG4gIH0sIGZhbHNlKTtcclxuXHJcbiAgYmdtLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCgpPT57XHJcbiAgICAkKFwiLm11c2ljXCIpLmNzcygnb3BhY2l0eScsXCIxXCIpO1xyXG4gICAgJChcIi5tdXNpY1wiKS5hZGRDbGFzcygnbXVzaWNfcm90YXRlJyk7XHJcbiAgfSlcclxuXHJcblxyXG4gICQoXCIubXVzaWNcIikub24oXCJjbGlja1wiLGZ1bmN0aW9uKCl7XHJcbiAgICBpZigkKHRoaXMpLmhhc0NsYXNzKCdtdXNpY19yb3RhdGUnKSl7XHJcbiAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoJ211c2ljX3JvdGF0ZScpO1xyXG4gICAgICBiZ20ucGF1c2UoKTtcclxuICAgIH1lbHNle1xyXG4gICAgICAkKHRoaXMpLmFkZENsYXNzKCdtdXNpY19yb3RhdGUnKTtcclxuICAgICAgYmdtLnBsYXkoKTtcclxuICAgIH1cclxuICB9KVxyXG5cclxuICB2YXIgc3RhZ2VXaWR0aGEgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgdmFyIHN0YWdlU2NhbGVhID0gc3RhZ2VXaWR0aGEgLyA2NDA7XHJcbiAgdmFyIHN0YWdlSGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC8gc3RhZ2VTY2FsZWE7XHJcbiAgdmFyIHNjcmVlbkhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgJChcIi5ib3hcIikuY3NzKHtcclxuICAgIHNjYWxlWDogc3RhZ2VTY2FsZWEsXHJcbiAgICBzY2FsZVk6IHN0YWdlU2NhbGVhXHJcbiAgfSk7XHJcbiAgJChcImJvZHlcIikuY3NzKHtcclxuICAgIFwib3BhY2l0eVwiOiAxXHJcbiAgfSk7XHJcbiAgJChcIi5ib3hcIikuaGVpZ2h0KHN0YWdlSGVpZ2h0KTtcclxuXHJcbiAgJChcIi5jbG9zZV9idG5cIikub24oXCJjbGlja1wiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoJCh0aGlzKS5oYXNDbGFzcygnc3RhcnRfYnRuJykgJiYgYmdtLnBhdXNlZCkge1xyXG4gICAgICBiZ20ucGxheSgpO1xyXG4gICAgfVxyXG4gICAgJCh0aGlzKS5wYXJlbnRzKFwiLnBhZ2VzXCIpLmZhZGVPdXQoMzUwKTtcclxuICAgIGlmICgkKHRoaXMpLmhhc0NsYXNzKFwicmVjZWl2ZV9idG5cIikpIHtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgd2F0ZXJBbmkoKTtcclxuICAgICAgfSwgMzUwKTtcclxuICAgIH1cclxuICB9KVxyXG5cclxuICAkKFwiLnBvc3Rlcl9idG5cIikub24oXCJjbGlja1wiLCgpPT57XHJcbiAgICAkKFwiLmxhc3RcIikuZmFkZUluKDM1MCk7XHJcbiAgfSlcclxuXHJcbiAgZnVuY3Rpb24gd2F0ZXJBbmkoKSB7XHJcbiAgICAkKFwiLnpob25nemlcIikuY3NzKHtcclxuICAgICAgXCJvcGFjaXR5XCI6IDEsXHJcbiAgICB9KTtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAkKFwiLnpob25nemlcIikuY3NzKHtcclxuICAgICAgICB0cmFuc2xhdGU6IFswLCAwXVxyXG4gICAgICB9KTtcclxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgJChcIi5rZXR0bGVfYm94LC53YXRlcl9idG5cIikuZmFkZUluKDUwMCk7XHJcbiAgICAgIH0sIDcwMCk7XHJcbiAgICB9LCA1MDApO1xyXG4gIH1cclxuXHJcbiAgdmFyIGluZGV4ID0gMDtcclxuICAkKFwiLndhdGVyX2J0blwiKS5vbihcImNsaWNrXCIsKCk9PntcclxuICAgIGlmIChpbmRleCA9PSAwKSB7XHJcbiAgICAgIGtldHRsZV9tb212ZSgxNjAsR3JvdzEpO1xyXG4gICAgICBmdW5jdGlvbiBHcm93MSgpIHtcclxuICAgICAgICAkKFwiLnpob25nemlcIikuY3NzKHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICB0cmFuc2xhdGU6IFswLCAyMF0sXHJcbiAgICAgICAgICBzY2FsZTogMC43XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAkKFwiLnBsYW50PmRpdlwiKS5lcShpbmRleCAtIDEpLmNzcyh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgIHNjYWxlOiAxXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgIH0sIDM1MCk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAoaW5kZXggPT0gMSkge1xyXG4gICAgICBrZXR0bGVfbW9tdmUoMzIwLCBHcm93Mik7XHJcbiAgICAgIGZ1bmN0aW9uIEdyb3cyKCkge1xyXG4gICAgICAgICQoXCIucGxhbnQ+ZGl2XCIpLmVxKGluZGV4IC0gMikuY3NzKHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICBzY2FsZTogMS4yXHJcbiAgICAgICAgfSlcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICQoXCIucGxhbnQ+ZGl2XCIpLmVxKGluZGV4IC0gMSkuY3NzKHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgc2NhbGU6IDFcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSwgMzUwKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChpbmRleCA9PSAyKSB7XHJcbiAgICAgIGtldHRsZV9tb212ZSg0MzAsIEdyb3czKTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIEdyb3czKCkge1xyXG4gICAgICAgICQoXCIucGxhbnQ+ZGl2XCIpLmVxKGluZGV4IC0gMikuY3NzKHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICBzY2FsZTogMS4yXHJcbiAgICAgICAgfSlcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICQoXCIucGxhbnQ+ZGl2XCIpLmVxKGluZGV4IC0gMSkuY3NzKHtcclxuICAgICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICAgICAgc2NhbGU6IDFcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgfSwgMzUwKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIGlmIChpbmRleCA9PSAzKSB7XHJcbiAgICAgIGtldHRsZV9tb212ZSg1MzAsIEdyb3c0KTtcclxuXHJcbiAgICAgIGZ1bmN0aW9uIEdyb3c0KCkge1xyXG4gICAgICAgICQoXCIucGxhbnQ+ZGl2XCIpLmVxKGluZGV4IC0gMikuY3NzKHtcclxuICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgICBzY2FsZTogMVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAkKFwiLnBsYW50PmRpdlwiKS5lcShpbmRleCAtIDEpLmNzcyh7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDEsXHJcbiAgICAgICAgICAgIHNjYWxlOiAxXHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgJChcIi53YXRlcl9idG5cIikuZmFkZU91dCgzNTApO1xyXG4gICAgICAgICAgJChcIi5kcmVzc19idG5cIikuZmFkZUluKDM1MCk7XHJcbiAgICAgICAgfSwgMzUwKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0pXHJcblxyXG4gICQoXCIuZHJlc3NfYnRuXCIpLm9uKFwiY2xpY2tcIiwoKT0+e1xyXG4gICAgJChcIi5kcmVzc19idG4sLmtldHRsZV9ib3hcIikuaGlkZSgpO1xyXG4gICAgJChcIi5wbGFudFwiKS5yZW1vdmVDbGFzcyhcInN3aW5nMVwiKTtcclxuICAgICQoXCIuY2hvb3NlX2JveFwiKS5mYWRlSW4oMzUwKTtcclxuICB9KVxyXG5cclxuICB2YXIga2V0dF9sb2NrID0gZmFsc2U7XHJcbiAgZnVuY3Rpb24ga2V0dGxlX21vbXZlKGRpc3RhbmNlLGNhbGxiYWNrKSB7XHJcbiAgICBpZiAoa2V0dF9sb2NrKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgICQoXCIua2V0dGxlX3NoYWRvd1wiKS5oaWRlKCk7XHJcbiAgICBrZXR0X2xvY2sgPSB0cnVlO1xyXG4gICAgJChcIi53YXRlcl9idG5cIikucmVtb3ZlQ2xhc3MoXCJzY2FsZV9iYWNrMlwiKTtcclxuICAgIGluZGV4Kys7XHJcbiAgICAkKFwiLmtldHRsZVwiKS50cmFuc2l0aW9uKHtcclxuICAgICAgdHJhbnNsYXRlOiBbMCwgLWRpc3RhbmNlXSxcclxuICAgIH0pLnRyYW5zaXRpb24oe1xyXG4gICAgICByb3RhdGU6ICctNDVkZWcnLFxyXG4gICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICQoXCIuc2FzaHVpXCIpLnRyYW5zaXRpb24oe1xyXG4gICAgICAgICAgb3BhY2l0eTogMSxcclxuICAgICAgICB9LCAzNTApLnRyYW5zaXRpb24oe1xyXG4gICAgICAgICAgdHJhbnNsYXRlOiBbLTEwLCAxMF0sXHJcbiAgICAgICAgICByb3RhdGU6ICcyOGRlZycsXHJcbiAgICAgICAgICBvcGFjaXR5OiAwLFxyXG4gICAgICAgICAgY29tcGxldGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfSwgMzUwKTtcclxuICAgICAgICAgICAgJChcIi5rZXR0bGVcIikudHJhbnNpdGlvbih7XHJcbiAgICAgICAgICAgICAgcm90YXRlOiAnMCdcclxuICAgICAgICAgICAgfSwgMzUwKS50cmFuc2l0aW9uKHtcclxuICAgICAgICAgICAgICB0cmFuc2xhdGU6IFswLCAwXSxcclxuICAgICAgICAgICAgICBjb21wbGV0ZTogKCk9PntcclxuICAgICAgICAgICAgICAgIGtldHRfbG9jayA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJChcIi53YXRlcl9idG5cIikuYWRkQ2xhc3MoXCJzY2FsZV9iYWNrMlwiKTtcclxuICAgICAgICAgICAgICAgICQoXCIua2V0dGxlX3NoYWRvd1wiKS5mYWRlSW4oMzUwKTtcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIDM1MClcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LCAyNTApLnRyYW5zaXRpb24oe1xyXG4gICAgICAgICAgdHJhbnNsYXRlOiBbMCwwXSxcclxuICAgICAgICAgIHJvdGF0ZTogJzI4ZGVnJyxcclxuICAgICAgICAgIG9wYWNpdHk6IDAsXHJcbiAgICAgICAgfSwgMjUwKVxyXG4gICAgICB9XHJcbiAgICB9LCA1MDApXHJcbiAgfVxyXG5cclxuICB2YXIgaW5wdXRFbGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmFtZScpXHJcbiAgaW5wdXRFbGUuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBXaWR0aENoZWNrKTtcclxuXHJcblxyXG4vLyB2YXIgYXJyID0gWyflsI/kuL0nLCAn5bCP5piOJywgJ+Wwj+e6oicsICflrrbluq0nLCAn5qCh6ZW/J107XHJcbmZ1bmN0aW9uIFdpZHRoQ2hlY2soKSB7XHJcbiAgdmFyIHN0ciA9IHRoaXM7XHJcbiAgdmFyIHcgPSAwO1xyXG4gIHZhciB0ZW1wQ291bnQgPSAwO1xyXG4gIC8vbGVuZ3RoIOiOt+WPluWtl+aVsOaVsO+8jOS4jeWMuuWIhuaxieWtl+WSjOiLseaWhyBcclxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci52YWx1ZS5sZW5ndGg7IGkrKykge1xyXG4gICAgLy9jaGFyQ29kZUF0KCnojrflj5blrZfnrKbkuLLkuK3mn5DkuIDkuKrlrZfnrKbnmoTnvJbnoIEgXHJcbiAgICB2YXIgYyA9IHN0ci52YWx1ZS5jaGFyQ29kZUF0KGkpO1xyXG4gICAgLy/ljZXlrZfoioLliqAxIFxyXG4gICAgaWYgKChjID49IDB4MDAwMSAmJiBjIDw9IDB4MDA3ZSkgfHwgKDB4ZmY2MCA8PSBjICYmIGMgPD0gMHhmZjlmKSkge1xyXG4gICAgICB3Kys7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3ICs9IDI7XHJcbiAgICB9XHJcbiAgICBpZiAodyA+IDgpIHtcclxuICAgICAgY29uc29sZS5sb2coc3RyLnZhbHVlKTtcclxuICAgICAgLy8gc3RyLnZhbHVlID0gc3RyLnZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChhcnIudmFsdWUuam9pbignfCcpLCAnaW1nJyksICcqJylcclxuICAgICAgc3RyLnZhbHVlID0gc3RyLnZhbHVlLnN1YnN0cigwLCBpKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4kKFwiI2ZpbGVcIikub24oXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKCkge1xyXG4gIHZhciBmaWxlID0gdGhpcy5maWxlc1swXVxyXG4gIHZhciBmbCA9IG5ldyBGaWxlUmVhZGVyKClcclxuICBmbC5yZWFkQXNEYXRhVVJMKGZpbGUpXHJcbiAgZmwub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgJChcIiNpbWFnZVwiKS5hdHRyKFwic3JjXCIsZmwucmVzdWx0KTtcclxuICAgIGNyb3BwSW1hZ2UoKVxyXG4gIH1cclxufSlcclxuXHJcbmZ1bmN0aW9uIGdldFJvdW5kZWRDYW52YXMoc291cmNlQ2FudmFzKSB7XHJcbiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xyXG4gIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgdmFyIHdpZHRoID0gc291cmNlQ2FudmFzLndpZHRoO1xyXG4gIHZhciBoZWlnaHQgPSBzb3VyY2VDYW52YXMuaGVpZ2h0O1xyXG5cclxuICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gIGNvbnRleHQuaW1hZ2VTbW9vdGhpbmdFbmFibGVkID0gdHJ1ZTtcclxuICBjb250ZXh0LmRyYXdJbWFnZShzb3VyY2VDYW52YXMsIDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xyXG4gIGNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLWluJztcclxuICBjb250ZXh0LmJlZ2luUGF0aCgpO1xyXG4gIGNvbnRleHQuYXJjKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgTWF0aC5taW4od2lkdGgsIGhlaWdodCkgLyAyLCAwLCAyICogTWF0aC5QSSwgdHJ1ZSk7XHJcbiAgY29udGV4dC5maWxsKCk7XHJcbiAgcmV0dXJuIGNhbnZhcztcclxufVxyXG5cclxuXHJcblxyXG52YXIgY3JvcHBhYmxlID0gZmFsc2U7XHJcbnZhciBjcm9wcGVyO1xyXG5mdW5jdGlvbiBjcm9wcEltYWdlKCkge1xyXG4gICQoXCIuY3JvcHBlcnBhZ2VcIikuc2hvdygpO1xyXG4gIHZhciBpbWFnZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWFnZScpO1xyXG4gIGNyb3BwZXIgPSBuZXcgQ3JvcHBlcihpbWFnZSwge1xyXG4gICAgZHJhZ01vZGU6ICdtb3ZlJyxcclxuICAgIGFzcGVjdFJhdGlvOiAxLFxyXG4gICAgdmlld01vZGU6IDEsXHJcbiAgICBhdXRvQ3JvcEFyZWE6IDAuOCxcclxuICAgIG1pbkNvbnRhaW5lcldpZHRoOiBzdGFnZVdpZHRoYSxcclxuICAgIG1pbkNvbnRhaW5lckhlaWdodDogc2NyZWVuSGVpZ2h0LFxyXG4gICAgcmVzdG9yZTogZmFsc2UsXHJcbiAgICBndWlkZXM6IGZhbHNlLFxyXG4gICAgY2VudGVyOiBmYWxzZSxcclxuICAgIGhpZ2hsaWdodDogZmFsc2UsXHJcbiAgICBjcm9wQm94TW92YWJsZTogZmFsc2UsXHJcbiAgICBjcm9wQm94UmVzaXphYmxlOiBmYWxzZSxcclxuICAgIHRvZ2dsZURyYWdNb2RlT25EYmxjbGljazogZmFsc2UsXHJcbiAgICByZWFkeTogZnVuY3Rpb24gKCkge1xyXG4gICAgICBjcm9wcGFibGUgPSB0cnVlO1xyXG4gICAgfSxcclxuICB9KTtcclxufVxyXG5cclxuLy/noa7lrprmjInpkq5cclxuJCgnI2VkaXQnKS5vbihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAkKFwiLmNyb3BwZXJwYWdlXCIpLmhpZGUoKTtcclxuICB2YXIgY3JvcHBlZENhbnZhcztcclxuICB2YXIgcm91bmRlZENhbnZhcztcclxuICB2YXIgcm91bmRlZEltYWdlO1xyXG4gIGNvbnNvbGUubG9nKGNyb3BwYWJsZSlcclxuICBpZiAoIWNyb3BwYWJsZSkge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICAvLyAvLyBDcm9wXHJcbiAgY3JvcHBlZENhbnZhcyA9IGNyb3BwZXIuZ2V0Q3JvcHBlZENhbnZhcygpO1xyXG4gIC8vIFJvdW5kXHJcbiAgcm91bmRlZENhbnZhcyA9IGdldFJvdW5kZWRDYW52YXMoY3JvcHBlZENhbnZhcyk7XHJcbiAgLy8gU2hvd1xyXG4gIHJvdW5kZWRJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2ltZycpO1xyXG4gIHJvdW5kZWRJbWFnZS5zcmMgPSByb3VuZGVkQ2FudmFzLnRvRGF0YVVSTCgpXHJcbiAgJChcIiNzYXZlXCIpLmF0dHIoXCJzcmNcIiwgcm91bmRlZEltYWdlLnNyYyk7XHJcbiAgJChcIiNsYXN0SW1nXCIpLmF0dHIoXCJzcmNcIiwgcm91bmRlZEltYWdlLnNyYyk7XHJcbiAgY3JvcHBlci5kZXN0cm95KCk7XHJcbn0pO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiQoXCIjY2FuY2xlXCIpLm9uKFwiY2xpY2tcIiwoKT0+e1xyXG4gICQoXCIuY3JvcHBlcnBhZ2VcIikuaGlkZSgpO1xyXG4gIGNyb3BwZXIuZGVzdHJveSgpO1xyXG59KVxyXG5cclxudmFyIHNhdmVhcnIgPSB7XHJcbiAgXCJleHByZXNzaW9uXCI6IDEsXHJcbiAgXCJoZWFkZHJlc3NcIjogLTEsXHJcbiAgXCJoYW5kT2JqZWN0XCI6IC0xXHJcbn1cclxudmFyIHNpdGVyID0gWzE2LDQ2LDQ4LDQ5XTtcclxudmFyIHNlbGZTaXRlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlbGZTaXRlJyk7XHJcblxyXG4vL+esrOS4gOasoei/m+WFpeaIluiAhea4hemZpOe8k+WtmOS5i+WQjumHjeaWsOmaj+acujTkuKrkvY3nva7lvZPkuK3nmoTkuIDkuKrvvIzlj43kuYvnm7TmjqXor7vlj5bnvJPlrZjnmoTkvY3nva7mlbDmja5cclxuaWYgKCFzZWxmU2l0ZSkge1xyXG4gIHZhciByID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKjMpO1xyXG4gIHNlbGZTaXRlID0gc2l0ZXJbcl07XHJcbiAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3NlbGZTaXRlJywgc2l0ZXJbcl0pO1xyXG59XHJcblxyXG5jb25zb2xlLmxvZyhzZWxmU2l0ZSlcclxuLy8gMTYgNDYgNDggNDlcclxuXHJcblxyXG4kLmFqYXgoe1xyXG4gIHVybDogXCIuLi9qcy9jb3R0b25BcnIuanNvblwiLCAvL2pzb27mlofku7bkvY3nva5cclxuICB0eXBlOiBcIkdFVFwiLCAvL+ivt+axguaWueW8j+S4umdldFxyXG4gIGRhdGFUeXBlOiBcImpzb25cIiwgLy/ov5Tlm57mlbDmja7moLzlvI/kuLpqc29uXHJcbiAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGFhcnIpIHsgLy/or7fmsYLmiJDlip/lrozmiJDlkI7opoHmiafooYznmoTmlrnms5UgXHJcbiAgICAvLyAkLmFkZFdlaVhpbkV2ZW50KCk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhkYXRhYXJyKTtcclxuICAgIGNvbnNvbGUubG9nKFwiZGl5aWNpXCIpO1xyXG4gICAgJC5hamF4KHtcclxuICAgICAgdXJsOiBcIi4uL2pzL3NpdGUuanNvblwiLCAvL2pzb27mlofku7bkvY3nva5cclxuICAgICAgdHlwZTogXCJHRVRcIiwgLy/or7fmsYLmlrnlvI/kuLpnZXRcclxuICAgICAgZGF0YVR5cGU6IFwianNvblwiLCAvL+i/lOWbnuaVsOaNruagvOW8j+S4umpzb25cclxuICAgICAgc3VjY2VzczogZnVuY3Rpb24gKGRhdGEpIHsgLy/or7fmsYLmiJDlip/lrozmiJDlkI7opoHmiafooYznmoTmlrnms5UgXHJcbiAgICAgICAgLy8gJC5hZGRXZWlYaW5FdmVudCgpO1xyXG4gICAgICAgIGRhdGFhcnIuZm9yRWFjaCgoZWwsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICB2YXIgcnkgPSAnMGRlZyc7XHJcbiAgICAgICAgICB2YXIgcmFuZG9tID0gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogMSk7XHJcbiAgICAgICAgICBpZiAocmFuZG9tID09IDApIHtcclxuICAgICAgICAgICAgcnkgPSAnMTgwZGVnJztcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHZhciBsZWZ0TnVtID0gZGF0YVtpbmRleF0ubGVmdCAtICgzODAgKiAoMSAtIChkYXRhW2luZGV4XS53aWR0aCAvIDM4MCkpIC8gMik7XHJcbiAgICAgICAgICB2YXIgVG9wTnVtID0gZGF0YVtpbmRleF0udG9wIC0gKDU3MyAqICgxIC0gKGRhdGFbaW5kZXhdLndpZHRoIC8gMzgwKSkgLyAyKTtcclxuICAgICAgICAgIHZhciBzdHlsZUNzcyA9ICctd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoJyArIChkYXRhW2luZGV4XS53aWR0aCAvIDM4MCkgLyAxICsgJyk7JyArXHJcbiAgICAgICAgICAndHJhbnNmb3JtOiBzY2FsZSgnICsgKGRhdGFbaW5kZXhdLndpZHRoIC8gMzgwKSAvIDEgKyAnKTsnICtcclxuICAgICAgICAgICdsZWZ0OicgKyBsZWZ0TnVtICsgJ3B4OycgK1xyXG4gICAgICAgICAgJ3RvcDonICsgVG9wTnVtICsgJ3B4OycgK1xyXG4gICAgICAgICAgJ3otaW5kZXg6JyArIGRhdGFbaW5kZXhdWyd6LWluZGV4J10gKyAnOydcclxuICAgICAgICAgIHZhciBkaXZTdHIgPVxyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cInBsYW50XCIgc3R5bGU9XCInICsgc3R5bGVDc3MgKyAnXCI+JyArXHJcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImlkX2JveFwiPicgKyBlbFsnbmFtZSddICsgJzwvc3Bhbj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJmb3VyXCIgc3R5bGU9XCJ0cmFuc2Zvcm06cm90YXRlWSgnKyByeSArJylcIj4nICtcclxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJiaWdfbVwiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImV4cHJlc3Npb25fYm94IGV4cHJlc3Npb24nICsgZWxbJ2V4cHJlc3Npb24nXSArICcgXCI+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwiaGFuZE9iamVjdF9ib3ggaGFuZE9iamVjdCcgKyBlbFsnaGFuZE9iamVjdCddICsgJ1wiPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImhlYWRkcmVzc19ib3ggaGVhZGRyZXNzJyArIGVsWydoZWFkZHJlc3MnXSArICdcIj48L2Rpdj4nICtcclxuICAgICAgICAgICAgJzwvZGl2PicgK1xyXG4gICAgICAgICAgICAnPC9kaXY+JztcclxuICAgICAgICAgICQoXCIuc3BfYm94XCIpLmFwcGVuZChkaXZTdHIpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgfVxyXG59KVxyXG5cclxuXHJcblxyXG5cclxuXHJcbnZhciB0eHRfZ2VuO1xyXG5cclxuJChcIi5jaG9vc2VfdW5pdF9ib3g+ZGl2XCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe1xyXG4gIHZhciBpbmRleF8gPSAkKHRoaXMpLmluZGV4KCk7XHJcbiAgJChcIi5jaG9vc2VfYm94XCIpLmF0dHIoXCJjaG9vc2VUeXBlXCIsIGluZGV4XyArIDEpO1xyXG4gICQoXCIuY2hvb3NlX2JveFwiKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdjaG9vc2VfYm94IGNob29zZScgKyAoaW5kZXhfICsgMSkpXHJcbn0pXHJcblxyXG4kKFwiLmFkZF9ib3g+ZGl2XCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe1xyXG4gIHZhciBpbmRleF8gPSAkKHRoaXMpLmluZGV4KCk7XHJcbiAgdmFyIHR5cGUgPSAkKFwiLmNob29zZV9ib3hcIikuYXR0cihcImNob29zZVR5cGVcIikgKiAxO1xyXG4gIHZhciB0eXBlQ2xhc3M7XHJcbiAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICBjYXNlIDE6XHJcbiAgICAgIHR5cGVDbGFzcyA9ICdleHByZXNzaW9uJ1xyXG4gICAgYnJlYWs7XHJcbiAgICBjYXNlIDI6XHJcbiAgICAgIHR5cGVDbGFzcyA9ICdoZWFkZHJlc3MnXHJcbiAgICBicmVhaztcclxuICAgIGNhc2UgMzpcclxuICAgICAgdHlwZUNsYXNzID0gJ2hhbmRPYmplY3QnXHJcbiAgICBicmVhaztcclxuICB9XHJcbiAgaWYgKHR5cGUgPT0gMSkge1xyXG4gICAgJChcIi5iaWdfbTFcIikuaGlkZSgpO1xyXG4gIH1cclxuICBjb25zb2xlLmxvZyh0eXBlLCB0eXBlQ2xhc3MgKyAnX2JveCcpXHJcbiAgdmFyICRjbGFzcyA9ICcuJyArIHR5cGVDbGFzcyArICdfYm94JztcclxuICAkKFwiLndhdGVyX2JnXCIpLmZpbmQoJGNsYXNzKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKHR5cGVDbGFzcyArICdfYm94JykuYWRkQ2xhc3ModHlwZUNsYXNzICsgaW5kZXhfKTtcclxuICBzYXZlYXJyW3R5cGVDbGFzc10gPSBpbmRleF87XHJcbiAgY29uc29sZS5sb2coc2F2ZWFycilcclxufSlcclxuXHJcbiQoXCIuY29tX2J0blwiKS5vbihcImNsaWNrXCIsKCk9PntcclxuICBcclxuICBpZiAoJChcIiNuYW1lXCIpLnZhbCgpID09IFwiXCIpe1xyXG4gICAgc2hvd1RpcChcIuivt+i+k+WFpeaYteensCFcIilcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgLy8gY29uc3QgbWludCA9IG5ldyBNaW50KFt0eHRDb25dKTtcclxuICAvLyB2YXIgdGVzdEJvb2xlYW4gPSBtaW50LnZhbGlkYXRvcigkKFwiI25hbWVcIikudmFsKCkpO1xyXG4gIHR4dENvbiA9IG5ldyBSZWdFeHAodHh0Q29uLCAnZ2knKTtcclxuICAvLyBjb25zb2xlLmxvZygsJ+acieayoeacieaVj+aEn+ivjScpO1xyXG4gIGlmICh0eHRDb24udGVzdCgkKFwiI25hbWVcIikudmFsKCkpKSB7XHJcbiAgICBzaG93VGlwKFwi5pi156ew5Lit5YyF5ZCr5pWP5oSf5a2X56ymIVwiKVxyXG4gIH1cclxuICAvLyBjb25zb2xlLmxvZyh0ZXN0Qm9vbGVhbilcclxuICBpZiAoJChcIiNzYXZlXCIpLmF0dHIoXCJzcmNcIikgPT0gXCIuL2ltYWdlcy9waG90by5wbmdcIikge1xyXG4gICAgc2hvd1RpcChcIuivt+S4iuS8oOWktOWDjyFcIilcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbiAgdHh0X2dlbiA9ICQoXCIjbmFtZVwiKS52YWwoKTtcclxuICAkKFwiLnBhZ2UyXCIpLmZhZGVPdXQoMzUwKTtcclxuICBHZW5lcmF0ZVBvc3RlcihzYXZlYXJyKTtcclxuICAvLyBzZWxmU2l0ZVxyXG4gICQuZWFjaCgkKFwiLnNwX2JveCAucGxhbnRcIiksZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gY29uc29sZS5sb2coJCh0aGlzKSlcclxuICAgIGlmICgkKHRoaXMpLmNzcygnekluZGV4JykgPT0gc2VsZlNpdGUpIHtcclxuICAgICAgY29uc29sZS5sb2coJCh0aGlzKS5jc3MoJ3pJbmRleCcpKVxyXG4gICAgICAgdmFyIGkxID0gc2F2ZWFyci5leHByZXNzaW9uO1xyXG4gICAgICAgdmFyIGkyID0gc2F2ZWFyci5oZWFkZHJlc3M7XHJcbiAgICAgICB2YXIgaTMgPSBzYXZlYXJyLmhhbmRPYmplY3Q7XHJcbiAgICAgICQodGhpcykuZmluZCgnLmV4cHJlc3Npb25fYm94JykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZXhwcmVzc2lvbl9ib3ggZXhwcmVzc2lvbicgKyBpMSk7XHJcbiAgICAgICQodGhpcykuZmluZCgnLmhlYWRkcmVzc19ib3gnKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdoZWFkZHJlc3NfYm94IGhlYWRkcmVzcycgKyBpMik7XHJcbiAgICAgICQodGhpcykuZmluZCgnLmhhbmRPYmplY3RfYm94JykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnaGFuZE9iamVjdF9ib3ggaGFuZE9iamVjdCcgKyBpMyk7XHJcbiAgICB9XHJcbiAgfSlcclxuICB3aW5kb3cubXlTY3JvbGwgPSBuZXcgSVNjcm9sbCgnI3dyYXBwZXInLCB7XHJcbiAgICBib3VuY2U6IGZhbHNlLFxyXG4gICAgc2Nyb2xsWDogdHJ1ZSxcclxuICAgIHNjcm9sbFk6IGZhbHNlLFxyXG4gICAgbW91c2VXaGVlbDogdHJ1ZSxcclxuICAgIHN0YXJ0WDotNjQwLFxyXG4gIH0pO1xyXG4gIFxyXG59KVxyXG5cclxud2luZG93Lm15U2Nyb2xsID0gbmV3IElTY3JvbGwoJyN3cmFwcGVyJywge1xyXG4gIGJvdW5jZTogZmFsc2UsXHJcbiAgc2Nyb2xsWDogdHJ1ZSxcclxuICBzY3JvbGxZOiBmYWxzZSxcclxuICBtb3VzZVdoZWVsOiB0cnVlLFxyXG4gIHN0YXJ0WDogLTY0MCxcclxufSk7XHJcblxyXG5teVNjcm9sbC5vbignYmVmb3JlU2Nyb2xsU3RhcnQnLCAoKT0+e1xyXG4gICQoXCIudGlwc19pbWcsLmxmX3R4dFwiKS5mYWRlT3V0KDIwMCk7XHJcbn0pO1xyXG5cclxuLy8gUVLlm77niYfpopzoibJhYTdhNGVcclxuXHJcbiQoXCIudGlwX2t1YW5nXCIpLm9uKFwiY2xpY2tcIixmdW5jdGlvbigpe1xyXG4gICQoXCIudGlwX3BhZ2VcIikuZmFkZU91dCgzNTApO1xyXG59KVxyXG5cclxuZnVuY3Rpb24gc2hvd1RpcCh0eHQpIHtcclxuICAkKFwiLnRpcF9wYWdlXCIpLmZhZGVJbigzNTApO1xyXG4gICQoXCIudGlwc193b3JkXCIpLnRleHQodHh0KTtcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICQoXCIudGlwX3BhZ2VcIikuZmFkZU91dCgzNTApO1xyXG4gIH0sIDMwMDApO1xyXG59XHJcblxyXG5cclxuZnVuY3Rpb24gR2VuZXJhdGVQb3N0ZXIoc2F2ZWFycikge1xyXG4gIHZhciBjbG91ZEZhY2U7XHJcbiAgdmFyIGNhbnZhczEgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzMScpO1xyXG4gIHZhciBjdHggPSBjYW52YXMxLmdldENvbnRleHQoJzJkJyk7XHJcblxyXG4gICQoXCIubmFtZV9ib3ggc3BhblwiKS5lcSgxKS50ZXh0KHR4dF9nZW4pO1xyXG5cclxuICB2YXIgaTEgPSBzYXZlYXJyLmV4cHJlc3Npb247XHJcbiAgdmFyIGkyID0gc2F2ZWFyci5oZWFkZHJlc3M7XHJcbiAgdmFyIGkzID0gc2F2ZWFyci5oYW5kT2JqZWN0O1xyXG4gIHZhciBpbWdTcmMgPSAnLi9pbWFnZXMvbmV3Lyc7XHJcbiAgaWYgKGkxID09IC0xKSB7XHJcbiAgICBpMS0tO1xyXG4gIH1cclxuICBpZiAoaTIgPT0gLTEpIHtcclxuICAgIGkyLS07XHJcbiAgfVxyXG4gIGlmIChpMyA9PSAtMSkge1xyXG4gICAgaTMtLTtcclxuICB9XHJcblxyXG4gIHZhciBpbWFnZTAgPSBuZXcgSW1hZ2UoKTtcclxuICBpbWFnZTAuc3JjID0gJy4vaW1hZ2VzL25ldy9oYW5kT2JqZWN0L2JpZ19tLnBuZyc7XHJcbiAgaW1hZ2UwLm9ubG9hZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICBjdHguZHJhd0ltYWdlKGltYWdlMCwgMCwgMCwgMzQ4LCAyNjYpO1xyXG4gICAgdmFyIGltYWdlMSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgaW1hZ2UxLnNyYyA9IGltZ1NyYyArICdleHByZXNzaW9uL2NjXycgKyAoaTEgKyAxKSArICcucG5nJztcclxuICAgIGltYWdlMS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UxLCAwLCAwLCAzNDgsIDI2Nik7XHJcbiAgICAgIHZhciBpbWFnZTIgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgaW1hZ2UyLnNyYyA9IGltZ1NyYyArICdoZWFkZHJlc3MvY2NfJyArIChpMiArIDEpICsgJy5wbmcnO1xyXG4gICAgICBpbWFnZTIub25sb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UyLCAwLCAwLCAzNDgsIDI2Nik7XHJcbiAgICAgICAgdmFyIGltYWdlMyA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgIGltYWdlMy5zcmMgPSBpbWdTcmMgKyAnaGFuZE9iamVjdC9jY18nICsgKGkzICsgMSkgKyAnLnBuZyc7XHJcbiAgICAgICAgaW1hZ2UzLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIGN0eC5kcmF3SW1hZ2UoaW1hZ2UzLCAwLCAwLCAzNDgsIDI2Nik7XHJcbiAgICAgICAgICBjbG91ZEZhY2UgPSBjYW52YXMxLnRvRGF0YVVSTCgpO1xyXG4gICAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjYW52YXMnKTtcclxuICAgICAgICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgIGltYWdlLnNyYyA9ICcuL2ltYWdlcy9zYXZlX2ltZzIucG5nJztcclxuICAgICAgICAgIGltYWdlLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDAsIDQ5MiwgNjYxKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJzYXZlXCIpLCAzNSwgMzUsIDEwMCwgMTAwKTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb2RlXCIpLCAzNzYsIDUxMCwgNzgsIDc4KTtcclxuICAgICAgICAgICAgY29udGV4dC5kcmF3SW1hZ2UoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuYW1lX2JveFwiKSwgMjEsIDE0MywgMTMwLCA1OCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ2NlbnRlcic7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZm9udCA9ICcyMHB4IOW+rui9r+mbhem7kSc7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoJ+eUqOaIt0lEJywgODUsIDE3MCk7XHJcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQodHh0X2dlbiwgODUsIDE5Mik7XHJcbiAgICAgICAgICAgIHZhciBpbWFnZTQgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgaW1hZ2U0LnNyYyA9IGNsb3VkRmFjZTtcclxuICAgICAgICAgICAgJChcIiNjbG91ZEltZ1wiKS5hdHRyKFwic3JjXCIsIGNsb3VkRmFjZSk7XHJcbiAgICAgICAgICAgIGltYWdlNC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoMjAwLCAyMClcclxuICAgICAgICAgICAgICBjb250ZXh0LnJvdGF0ZShNYXRoLlBJIC8gNilcclxuICAgICAgICAgICAgICBjb250ZXh0LmRyYXdJbWFnZShpbWFnZTQsIDE1LCAtNDUsIDM0OCAqIDAuNTUsIDI2NiAqIDAuNTUpO1xyXG4gICAgICAgICAgICAgICQoXCIjc19JbWdcIikuYXR0cihcInNyY1wiLGNhbnZhcy50b0RhdGFVUkwoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIFxyXG59XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4kKFwiLnNoYXJlX2ltZ1wiKS5vbihcImNsaWNrXCIsICgpID0+IHtcclxuICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gJ2h0dHBzOi8vd3d3LmJhaWR1LmNvbS8nO1xyXG4gIH0sIDIwMCk7XHJcbn0pXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvL+mYu+atoum7mOiupOeahOWkhOeQhuaWueW8jyjpmLvmraLkuIvmi4nmu5HliqjnmoTmlYjmnpwpXHJcbiAgfSwge1xyXG4gICAgcGFzc2l2ZTogZmFsc2VcclxuICB9KTtcclxuXHJcbiAgdmFyIGFnZW50ID0gbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpOyAvL+ajgOa1i+aYr+WQpuaYr2lvc1xyXG4gIHZhciBpTGFzdFRvdWNoID0gbnVsbDsgLy/nvJPlrZjkuIrkuIDmrKF0YXDnmoTml7bpl7RcclxuICBpZiAoYWdlbnQuaW5kZXhPZignaXBob25lJykgPj0gMCB8fCBhZ2VudC5pbmRleE9mKCdpcGFkJykgPj0gMCkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICB2YXIgaU5vdyA9IG5ldyBEYXRlKClcclxuICAgICAgICAuZ2V0VGltZSgpO1xyXG4gICAgICBpTGFzdFRvdWNoID0gaUxhc3RUb3VjaCB8fCBpTm93ICsgMSAvKiog56ys5LiA5qyh5pe25bCGaUxhc3RUb3VjaOiuvuS4uuW9k+WJjeaXtumXtCsxICovIDtcclxuICAgICAgdmFyIGRlbHRhID0gaU5vdyAtIGlMYXN0VG91Y2g7XHJcbiAgICAgIGlmIChkZWx0YSA8IDUwMCAmJiBkZWx0YSA+IDApIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgICBpTGFzdFRvdWNoID0gaU5vdztcclxuICAgIH0sIGZhbHNlKTtcclxuICB9XHJcblxyXG4gIC8vIGxldCBPcmllbnRhdGlvbiA9IG51bGxcclxuICAvLyBFWElGLmdldERhdGEoaW1hZ2UsIGZ1bmN0aW9uICgpIHtcclxuICAvLyBPcmllbnRhdGlvbiA9IEVYSUYuZ2V0VGFnKHRoaXMsICdPcmllbnRhdGlvbicpXHJcbiAgLy8gfSlcclxuICAvLyBzd2l0Y2ggKE9yaWVudGF0aW9uKSB7XHJcbiAgLy8gY2FzZSAxOiAvLyDkuI3pnIDopoHpgInmi6nvvIzmraPluLhcclxuICAvLyAgIGJyZWFrXHJcbiAgLy8gY2FzZSA2OiAvLyDpnIDopoHpobrml7bpkojvvIjlkJHlt6bvvIk5MOW6puaXi+i9rFxyXG4gIC8vICAgYnJlYWtcclxuICAvLyBjYXNlIDg6IC8vIOmcgOimgemAhuaXtumSiO+8iOWQkeWPs++8iTkw5bqm5peL6L2sICAgXHJcbiAgLy8gICBicmVha1xyXG4gIC8vIGNhc2UgMzogLy8g6ZyA6KaBMTgw5bqm5peL6L2sXHJcbiAgLy8gICBicmVha1xyXG4gIC8vIH1cclxuXHJcbn0pIl0sInNvdXJjZVJvb3QiOiIifQ==